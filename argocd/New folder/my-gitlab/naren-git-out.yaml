---
# Source: my-gitlab/charts/gitlab/charts/gitlab/charts/gitaly/templates/pdb.yaml
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: naren-gitaly
  namespace: naren-gitlab
  labels:
    app: gitaly
    chart: gitaly-6.1.2
    release: naren
    heritage: Helm
    
spec:
  maxUnavailable:  1
  selector:
    matchLabels:
      app: gitaly
      release: naren
---
# Source: my-gitlab/charts/gitlab/charts/gitlab/charts/gitlab-shell/templates/pdb.yaml
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: naren-gitlab-shell
  namespace: naren-gitlab
  labels:
    app: gitlab-shell
    chart: gitlab-shell-6.1.2
    release: naren
    heritage: Helm
    
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app: gitlab-shell
      release: naren
---
# Source: my-gitlab/charts/gitlab/charts/gitlab/charts/kas/templates/pdb.yaml
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: naren-kas
  namespace: naren-gitlab
  labels:
    app: kas
    chart: kas-6.1.2
    release: naren
    heritage: Helm
    
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app: kas
      release: naren
---
# Source: my-gitlab/charts/gitlab/charts/gitlab/charts/sidekiq/templates/pdb.yaml
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: naren-sidekiq-all-in-1-v1
  namespace: naren-gitlab
  labels:
    app: sidekiq
    chart: sidekiq-6.1.2
    release: naren
    heritage: Helm
    
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app: sidekiq
      release: naren
      
      queue-pod-name: all-in-1
---
# Source: my-gitlab/charts/gitlab/charts/gitlab/charts/webservice/templates/pdb.yaml
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: naren-webservice-default
  namespace: naren-gitlab
  labels:
    app: webservice
    chart: webservice-6.1.2
    release: naren
    heritage: Helm
    gitlab.com/webservice-name: default
    
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app: webservice
      release: naren
      
      
      gitlab.com/webservice-name: default
---
# Source: my-gitlab/charts/gitlab/charts/minio/templates/pdb.yaml
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: naren-minio-v1
  namespace: naren-gitlab
  labels:
    app: minio
    chart: minio-0.4.3
    release: naren
    heritage: Helm
    
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app: minio
      release: naren
      component: app
---
# Source: my-gitlab/charts/gitlab/charts/registry/templates/pdb.yaml
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: naren-registry-v1
  namespace: naren-gitlab
  labels:
    app: registry
    chart: registry-0.7.0
    release: naren
    heritage: Helm
    
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app: registry
      release: naren
---
# Source: my-gitlab/charts/gitlab/charts/gitlab-runner/templates/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
  name: naren-gitlab-runner
  labels:
    app: naren-gitlab-runner
    chart: gitlab-runner-0.41.0
    release: "naren"
    heritage: "Helm"
---
# Source: my-gitlab/charts/gitlab/charts/gitlab-runner/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: naren-gitlab-runner
  labels:
    app: naren-gitlab-runner
    chart: gitlab-runner-0.41.0
    release: "naren"
    heritage: "Helm"
data:
  entrypoint: |
    #!/bin/bash
    set -e

    mkdir -p /home/gitlab-runner/.gitlab-runner/

    cp /configmaps/config.toml /home/gitlab-runner/.gitlab-runner/

    # Set up environment variables for cache
    if [[ -f /secrets/accesskey && -f /secrets/secretkey ]]; then
      export CACHE_S3_ACCESS_KEY=$(cat /secrets/accesskey)
      export CACHE_S3_SECRET_KEY=$(cat /secrets/secretkey)
    fi

    if [[ -f /secrets/gcs-applicaton-credentials-file ]]; then
      export GOOGLE_APPLICATION_CREDENTIALS="/secrets/gcs-applicaton-credentials-file"
    elif [[ -f /secrets/gcs-application-credentials-file ]]; then
      export GOOGLE_APPLICATION_CREDENTIALS="/secrets/gcs-application-credentials-file"
    else
      if [[ -f /secrets/gcs-access-id && -f /secrets/gcs-private-key ]]; then
        export CACHE_GCS_ACCESS_ID=$(cat /secrets/gcs-access-id)
        # echo -e used to make private key multiline (in google json auth key private key is oneline with \n)
        export CACHE_GCS_PRIVATE_KEY=$(echo -e $(cat /secrets/gcs-private-key))
      fi
    fi

    if [[ -f /secrets/azure-account-name && -f /secrets/azure-account-key ]]; then
      export CACHE_AZURE_ACCOUNT_NAME=$(cat /secrets/azure-account-name)
      export CACHE_AZURE_ACCOUNT_KEY=$(cat /secrets/azure-account-key)
    fi

    if [[ -f /secrets/runner-registration-token ]]; then
      export REGISTRATION_TOKEN=$(cat /secrets/runner-registration-token)
    fi

    if [[ -f /secrets/runner-token ]]; then
      export CI_SERVER_TOKEN=$(cat /secrets/runner-token)
    fi

    # Validate this also at runtime in case the user has set a custom secret
    if [[ ! -z "$CI_SERVER_TOKEN" && "1" -ne "1" ]]; then
      echo "Using a runner token with more than 1 replica is not supported."
      exit 1
    fi

    # Register the runner
    if ! sh /configmaps/register-the-runner; then
      exit 1
    fi

    # Run pre-entrypoint-script
    if ! bash /configmaps/pre-entrypoint-script; then
      exit 1
    fi

    # Start the runner
    exec /entrypoint run --user=gitlab-runner \
      --working-directory=/home/gitlab-runner

  config.toml: |
    concurrent = 10
    check_interval = 30
    log_level = "info"

  
  config.template.toml:   |
    [[runners]]
      [runners.kubernetes]
      image = "ubuntu:18.04"
      [runners.cache]
        Type = "s3"
        Path = "gitlab-runner"
        Shared = true
        [runners.cache.s3]
          ServerAddress = "minio.10.181.136.59.nip.io"
          BucketName = "runner-cache"
          BucketLocation = "us-east-1"
          Insecure = false
      
  

  register-the-runner: |
    #!/bin/bash
    MAX_REGISTER_ATTEMPTS=30

    for i in $(seq 1 "${MAX_REGISTER_ATTEMPTS}"); do
      echo "Registration attempt ${i} of ${MAX_REGISTER_ATTEMPTS}"
      /entrypoint register \
        --template-config /configmaps/config.template.toml \
        --non-interactive

      retval=$?

      if [ ${retval} = 0 ]; then
        break
      elif [ ${i} = ${MAX_REGISTER_ATTEMPTS} ]; then
        exit 1
      fi

      sleep 5
    done

    exit 0

  check-live: |
    #!/bin/bash
    if /usr/bin/pgrep -f .*register-the-runner; then
      exit 0
    elif /usr/bin/pgrep gitlab.*runner; then
      exit 0
    else
      exit 1
    fi

  pre-entrypoint-script: |
---
# Source: my-gitlab/charts/gitlab/charts/gitlab/charts/gitaly/templates/configmap.yml
apiVersion: v1
kind: ConfigMap
metadata:
  name: naren-gitaly
  namespace: naren-gitlab
  labels:
    app: gitaly
    chart: gitaly-6.1.2
    release: naren
    heritage: Helm
    
data:
  configure: |
    set -e
    mkdir -p /init-secrets/gitaly /init-secrets/shell
    cp -v -r -L /init-config/.gitlab_shell_secret  /init-secrets/shell/.gitlab_shell_secret
    cp -v -r -L /init-config/gitaly_token  /init-secrets/gitaly/gitaly_token
  config.toml.erb: |
    # The directory where Gitaly's executables are stored
    bin_dir = "/usr/local/bin"

    # listen on a TCP socket. This is insecure (no authentication)
    listen_addr = "0.0.0.0:8075"

    # Directory where internal sockets reside
    # note: no value will result in a `/tmp/gitlab-internal-*` path
    # internal_socket_dir = "/home/git"

    # If metrics collection is enabled, inform gitaly about that
    prometheus_listen_addr = "0.0.0.0:9236"
    
    <% @storages = [  "default",  ] %>

    <% @index=`echo ${HOSTNAME##*-}`.to_i %>
    <% if @storages.length > @index %>
    [[storage]]
    name = "<%= @storages[@index] %>"
    path = "/home/git/repositories"
    <% else %>
    <% raise Exception, "Storage for node #{@index} is not present in the storageNames array. Did you use kubectl to scale up? You need to solely use helm for this purpose." %>
    <% end %>

    [logging]
    format = "json"
    dir = "/var/log/gitaly"

    [auth]
    token = <%= File.read('/etc/gitlab-secrets/gitaly/gitaly_token').strip.to_json %>

    [git]
    use_bundled_binaries = true

    [gitaly-ruby]
    # The directory where gitaly-ruby is installed
    dir = "/srv/gitaly-ruby"

    [gitlab-shell]
    # The directory where gitlab-shell is installed
    dir = "/srv/gitlab-shell"

    [gitlab]
    # location of shared secret for GitLab Shell / API interaction
    secret_file = "/etc/gitlab-secrets/shell/.gitlab_shell_secret"
    # URL of API
    url = "http://naren-webservice-default.naren-gitlab.svc:8181/"

    [gitlab.http-settings]
    # read_timeout = 300
    # user = someone
    # password = somepass
    # ca_file = /etc/ssl/cert.pem
    # ca_path = /etc/pki/tls/certs
    self_signed_cert = false

    [hooks]
    # directory containing custom hooks
    custom_hooks_dir = "/home/git/custom_hooks"
---
# Source: my-gitlab/charts/gitlab/charts/gitlab/charts/gitlab-exporter/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: naren-gitlab-exporter
  namespace: naren-gitlab
  labels:
    app: gitlab-exporter
    chart: gitlab-exporter-6.1.2
    release: naren
    heritage: Helm
    
data:
  gitlab-exporter.yml.erb: |
    server:
      name: webrick
      listen_address: 0.0.0.0
      listen_port: 9168

    probes:
      db_common: &db_common
        methods:
          - probe_db
        opts:
          connection_string: dbname=gitlabhq_production user=gitlab host=naren-postgresql.naren-gitlab.svc port=5432 password='<%= File.read('/etc/gitlab/postgres/psql-password-main').strip.gsub(/[\'\\]/) { |esc| '\\' + esc } %>'
      database:
        multiple: true
        ci_builds:
          class_name: Database::CiBuildsProber
          <<: *db_common
        tuple_stats:
          class_name: Database::TuplesProber
          <<: *db_common
        rows_count:
          class_name: Database::RowCountProber
          <<: *db_common
      database_bloat:
        class_name: Database::BloatProber
        <<: *db_common

      sidekiq: &sidekiq
        methods:
          - probe_queues
          - probe_workers
          - probe_retries
          - probe_stats
        opts:
          redis_url: redis://:<%= ERB::Util::url_encode(File.read("/etc/gitlab/redis/redis-password").strip) %>@naren-redis-master.naren-gitlab.svc:6379
          redis_enable_client: false

      ruby: &ruby
        methods:
          - probe_gc
        opts:
          quantiles: false

      metrics:
        multiple: true
        ruby:
          <<: *ruby
        sidekiq:
          <<: *sidekiq
        ci_builds:
          class_name: Database::CiBuildsProber
          <<: *db_common
        tuple_stats:
          class_name: Database::TuplesProber
          <<: *db_common
        rows_count:
          class_name: Database::RowCountProber
          <<: *db_common

  configure: |
    set -e
    config_dir="/init-config"
    secret_dir="/init-secrets"
    
    for secret in   ; do
      mkdir -p "${secret_dir}/${secret}"
      cp -v -r -L "${config_dir}/${secret}/." "${secret_dir}/${secret}/"
    done
    for secret in redis postgres ; do
      if [ -e "${config_dir}/${secret}" ]; then
        mkdir -p "${secret_dir}/${secret}"
        cp -v -r -L "${config_dir}/${secret}/." "${secret_dir}/${secret}/"
      fi
    done
    
# Leave this here - This line denotes end of block to the parser.
---
# Source: my-gitlab/charts/gitlab/charts/gitlab/charts/gitlab-shell/templates/configmap-sshd.yml
apiVersion: v1
kind: ConfigMap
metadata:
  name: naren-gitlab-shell-sshd
  namespace: naren-gitlab
  labels:
    app: gitlab-shell
    chart: gitlab-shell-6.1.2
    release: naren
    heritage: Helm
    
data:
  sshd_config: |
    #	$OpenBSD: sshd_config,v 1.101 2017/03/14 07:19:07 djm Exp $

    # This is the sshd server system-wide configuration file.  See
    # sshd_config(5) for more information.

    # This sshd was compiled with PATH=/bin:/usr/bin:/sbin:/usr/sbin

    # The strategy used for options in the default sshd_config shipped with
    # OpenSSH is to specify options with their default value where
    # possible, but leave them commented.  Uncommented options override the
    # default value.

    Port 2222
    #AddressFamily any
    #ListenAddress 0.0.0.0
    #ListenAddress ::

    #HostKey /etc/ssh/ssh_host_rsa_key
    #HostKey /etc/ssh/ssh_host_dsa_key
    #HostKey /etc/ssh/ssh_host_ecdsa_key
    #HostKey /etc/ssh/ssh_host_ed25519_key

    # Ciphers and keying
    #RekeyLimit default none

    # Logging
    #SyslogFacility AUTH
    LogLevel ERROR

    # Authentication:

    PermitRootLogin no
    #StrictModes yes
    #MaxAuthTries 6
    #MaxSessions 10

    #PubkeyAuthentication yes

    #AuthorizedPrincipalsFile none

    # For this to work you will also need host keys in /etc/ssh/ssh_known_hosts
    #HostbasedAuthentication no
    # Change to yes if you don't trust ~/.ssh/known_hosts for
    # HostbasedAuthentication
    #IgnoreUserKnownHosts no
    # Don't read the user's ~/.rhosts and ~/.shosts files
    #IgnoreRhosts yes

    #PermitEmptyPasswords no

    # Change to no to disable s/key passwords
    #ChallengeResponseAuthentication yes

    # Kerberos options
    #KerberosAuthentication no
    #KerberosOrLocalPasswd yes
    #KerberosTicketCleanup yes
    #KerberosGetAFSToken no

    # GSSAPI options
    #GSSAPIAuthentication no
    #GSSAPICleanupCredentials yes

    # Set this to 'yes' to enable PAM authentication, account processing,
    # and session processing. If this is enabled, PAM authentication will
    # be allowed through the ChallengeResponseAuthentication and
    # PasswordAuthentication.  Depending on your PAM configuration,
    # PAM authentication via ChallengeResponseAuthentication may bypass
    # the setting of "PermitRootLogin without-password".
    # If you just want the PAM account and session checks to run without
    # PAM authentication, then enable this but set PasswordAuthentication
    # and ChallengeResponseAuthentication to 'no'.
    #UsePAM no

    #AllowAgentForwarding yes
    #AllowTcpForwarding yes
    #GatewayPorts no
    #X11Forwarding no
    #X11DisplayOffset 10
    #X11UseLocalhost yes
    #PermitTTY yes
    #PrintMotd yes
    #PrintLastLog yes
    #TCPKeepAlive yes
    #UseLogin no
    #PermitUserEnvironment no
    #Compression delayed
    ClientAliveInterval 0
    #ClientAliveCountMax 3
    #UseDNS no
    PidFile /srv/sshd/sshd.pid
    #PermitTunnel no
    #ChrootDirectory none
    #VersionAddendum none

    # no default banner path
    #Banner none

    # override default of no subsystems
    # Subsystem	sftp	/usr/lib/ssh/sftp-server

    # the following are HPN related configuration options
    # tcp receive buffer polling. disable in non autotuning kernels
    #TcpRcvBufPoll yes

    # disable hpn performance boosts
    #HPNDisabled no

    # buffer size for hpn to non-hpn connections
    #HPNBufferSize 2048


    # Example of overriding settings on a per-user basis
    #Match User anoncvs
    #	X11Forwarding no
    #	AllowTcpForwarding no
    #	PermitTTY no
    #	ForceCommand cvs server

    # The default is to check both .ssh/authorized_keys and .ssh/authorized_keys2
    # but this is overridden so installations will only check .ssh/authorized_keys
    AuthorizedKeysFile	.ssh/authorized_keys

    AuthorizedKeysCommand /authorized_keys %u %k
    AuthorizedKeysCommandUser git

    PasswordAuthentication no

    AllowUsers git

    # Enable the use of Git protcol v2
    AcceptEnv GIT_PROTOCOL

    # Hard disable all forwarding
    DisableForwarding yes

    # Specifies the maximum number of concurrent unauthenticated connections to the SSH daemon.
    # See `man sshd_config(5)`
    
    MaxStartups 10:30:100
    

    # Specifies amount of time athat the server will disconnect after if the user has not successfully logged in
    LoginGraceTime 60
# Leave this here - This line denotes end of block to the parser.
---
# Source: my-gitlab/charts/gitlab/charts/gitlab/charts/gitlab-shell/templates/configmap.yml
apiVersion: v1
kind: ConfigMap
metadata:
  name: naren-gitlab-shell
  namespace: naren-gitlab
  labels:
    app: gitlab-shell
    chart: gitlab-shell-6.1.2
    release: naren
    heritage: Helm
    
data:
  configure: |
    set -e
    config_dir="/init-config"
    secret_dir="/init-secrets"
    
    for secret in shell ; do
      mkdir -p "${secret_dir}/${secret}"
      cp -v -r -L "${config_dir}/${secret}/." "${secret_dir}/${secret}/"
    done
    for secret in redis minio objectstorage postgres ldap omniauth smtp kas pages oauth-secrets mailroom ; do
      if [ -e "${config_dir}/${secret}" ]; then
        mkdir -p "${secret_dir}/${secret}"
        cp -v -r -L "${config_dir}/${secret}/." "${secret_dir}/${secret}/"
      fi
    done
    mkdir -p /${secret_dir}/ssh
    cp -v -r -L /${config_dir}/ssh_host_* /${secret_dir}/ssh/
    chmod 0400 /${secret_dir}/ssh/ssh_host_*
  config.yml.tpl: |
    # GitLab user. git by default
    user: git

    # Url to gitlab instance. Used for api calls. Should end with a slash.
    gitlab_url: "http://naren-webservice-default.naren-gitlab.svc:8181/"

    secret_file: /etc/gitlab-secrets/shell/.gitlab_shell_secret

    http_settings:
      self_signed_cert: false

    # File used as authorized_keys for gitlab user
    auth_file: "/home/git/.ssh/authorized_keys"

    # Log file.
    # Default is gitlab-shell.log in the root directory.
    log_file: "/var/log/gitlab-shell/gitlab-shell.log"

    log_format: text

    # Audit usernames.
    # Set to true to see real usernames in the logs instead of key ids, which is easier to follow, but
    # incurs an extra API call on every gitlab-shell command.
    audit_usernames: false

    
# Leave this here - This line denotes end of block to the parser.
---
# Source: my-gitlab/charts/gitlab/charts/gitlab/charts/gitlab-shell/templates/nginx-tcp-configmap.yml
apiVersion: v1
kind: ConfigMap
metadata:
  name: naren-nginx-ingress-tcp
  namespace: naren-gitlab
  labels:
    app: gitlab-shell
    chart: gitlab-shell-6.1.2
    release: naren
    heritage: Helm
    
data:
  "22": "naren-gitlab/naren-gitlab-shell:22::"
---
# Source: my-gitlab/charts/gitlab/charts/gitlab/charts/kas/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: naren-kas
  namespace: naren-gitlab
  labels:
    app: kas
    chart: kas-6.1.2
    release: naren
    heritage: Helm
    
data:
  # See https://gitlab.com/gitlab-org/cluster-integration/gitlab-agent/-/blob/master/pkg/kascfg/config_example.yaml
  config.yaml: |
    agent:
      kubernetes_api:
        listen:
          address: :8154
        url_path_prefix: /k8s-proxy
      listen:
        address: :8150
        websocket: true
    api:
      listen:
        address: :8153
        authentication_secret_file: /etc/kas/.gitlab_kas_secret
    gitlab:
      address: http://naren-webservice-default.naren-gitlab.svc:8181
      authentication_secret_file: /etc/kas/.gitlab_kas_secret
    observability:
      listen:
        address: :8151
    private_api:
      listen:
        address: :8155
        authentication_secret_file: /etc/kas/.gitlab_kas_private_api_secret
    redis:
      password_file: /etc/kas/redis/redis-password
      server:
        address: naren-redis-master.naren-gitlab.svc:6379
---
# Source: my-gitlab/charts/gitlab/charts/gitlab/charts/migrations/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: naren-migrations
  namespace: naren-gitlab
  labels:
    app: migrations
    chart: migrations-6.1.2
    release: naren
    heritage: Helm
    
data:
  pages_redirect_uri: https://projects.pages.10.181.136.59.nip.io/auth
  installation_type: |
    gitlab-helm-chart
  database.yml.erb: |
    
    production:
      main:
        adapter: postgresql
        encoding: unicode
        database: gitlabhq_production
        username: gitlab
        password: <%= File.read('/etc/gitlab/postgres/psql-password-main').strip.to_json %>
        host: "naren-postgresql.naren-gitlab.svc"
        port: 5432
        connect_timeout: 
        keepalives: 
        keepalives_idle: 
        keepalives_interval: 
        keepalives_count: 
        tcp_user_timeout: 
        application_name: 
        prepared_statements: false
        database_tasks: true
        
        
  resque.yml.erb: |
    production:
      url: redis://:<%= ERB::Util::url_encode(File.read("/etc/gitlab/redis/redis-password").strip) %>@naren-redis-master.naren-gitlab.svc:6379
      
      id:
  
  
  
  cable.yml.erb: |
    production:
      url: redis://:<%= ERB::Util::url_encode(File.read("/etc/gitlab/redis/redis-password").strip) %>@naren-redis-master.naren-gitlab.svc:6379
      
      id:
      adapter: redis
  
  
  
  gitlab.yml.erb: |
    production: &base
      gitlab:
        host: gitlab.10.181.136.59.nip.io
      gitaly:
        client_path: /home/git/gitaly/bin
        token: <%= File.read('/etc/gitlab/gitaly/gitaly_token').strip.to_json %>
      repositories:
        storages: # You must have at least a `default` storage path.
          default:
            path: /var/opt/gitlab/repo
            gitaly_address: tcp://naren-gitaly-0.naren-gitaly.naren-gitlab.svc:8075
          
      
      sidekiq:
      
  configure: |
    set -e
    config_dir="/init-config"
    secret_dir="/init-secrets"
    
    for secret in rails-secrets migrations gitaly ; do
      mkdir -p "${secret_dir}/${secret}"
      cp -v -r -L "${config_dir}/${secret}/." "${secret_dir}/${secret}/"
    done
    for secret in redis minio objectstorage postgres ldap omniauth smtp kas pages oauth-secrets mailroom ; do
      if [ -e "${config_dir}/${secret}" ]; then
        mkdir -p "${secret_dir}/${secret}"
        cp -v -r -L "${config_dir}/${secret}/." "${secret_dir}/${secret}/"
      fi
    done
    
    
    
# Leave this here - This line denotes end of block to the parser.
---
# Source: my-gitlab/charts/gitlab/charts/gitlab/charts/sidekiq/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: naren-sidekiq
  namespace: naren-gitlab
  labels:
    app: sidekiq
    chart: sidekiq-6.1.2
    release: naren
    heritage: Helm
    
data:
  installation_type: |
    gitlab-helm-chart
  database.yml.erb: |
    
    production:
      main:
        adapter: postgresql
        encoding: unicode
        database: gitlabhq_production
        username: gitlab
        password: <%= File.read('/etc/gitlab/postgres/psql-password-main').strip.to_json %>
        host: "naren-postgresql.naren-gitlab.svc"
        port: 5432
        connect_timeout: 
        keepalives: 
        keepalives_idle: 
        keepalives_interval: 
        keepalives_count: 
        tcp_user_timeout: 
        application_name: 
        prepared_statements: false
        database_tasks: true
        
        
  smtp_settings.rb: |
    
  resque.yml.erb: |
    production:
      url: redis://:<%= ERB::Util::url_encode(File.read("/etc/gitlab/redis/redis-password").strip) %>@naren-redis-master.naren-gitlab.svc:6379
      
      id:
  
  
  
  cable.yml.erb: |
    production:
      url: redis://:<%= ERB::Util::url_encode(File.read("/etc/gitlab/redis/redis-password").strip) %>@naren-redis-master.naren-gitlab.svc:6379
      
      id:
      adapter: redis
  
  
  
  gitlab.yml.erb: |
    production: &base
      gitlab:
        host: gitlab.10.181.136.59.nip.io
        https: true
        max_request_duration_seconds: 57
        impersonation_enabled: 
        application_settings_cache_seconds: 60
        usage_ping_enabled: true
        seat_link_enabled: true
        default_can_create_group: true
        username_changing_enabled: true
        issue_closing_pattern: 
        default_theme: 
        default_projects_features:
          issues: true
          merge_requests: true
          wiki: true
          snippets: true
          builds: true
          container_registry: true
        webhook_timeout: 
        trusted_proxies:
        time_zone: "UTC"        
        email_from: "gitlab@10.181.136.59.nip.io"
        email_display_name: "GitLab"
        email_reply_to: "noreply@10.181.136.59.nip.io"
        email_subject_suffix: ""
      
      gravatar:
        plain_url: 
        ssl_url: 
      extra:
        
        
        
        
        
        
      artifacts:
        enabled: true
        object_store:
          enabled: true
          remote_directory: gitlab-artifacts
          proxy_download: true
          connection:
            provider: AWS
            region: us-east-1
            host: minio.10.181.136.59.nip.io
            endpoint: http://naren-minio-svc.naren-gitlab.svc:9000
            path_style: true
            aws_access_key_id: <%= File.read('/etc/gitlab/minio/accesskey').strip.to_json %>
            aws_secret_access_key: <%= File.read('/etc/gitlab/minio/secretkey').strip.to_json %>
      lfs:
        enabled: true
        object_store:
          enabled: true
          remote_directory: git-lfs
          proxy_download: true
          connection:
            provider: AWS
            region: us-east-1
            host: minio.10.181.136.59.nip.io
            endpoint: http://naren-minio-svc.naren-gitlab.svc:9000
            path_style: true
            aws_access_key_id: <%= File.read('/etc/gitlab/minio/accesskey').strip.to_json %>
            aws_secret_access_key: <%= File.read('/etc/gitlab/minio/secretkey').strip.to_json %>
      uploads:
        enabled: true
        object_store:
          enabled: true
          remote_directory: gitlab-uploads
          proxy_download: true
          connection:
            provider: AWS
            region: us-east-1
            host: minio.10.181.136.59.nip.io
            endpoint: http://naren-minio-svc.naren-gitlab.svc:9000
            path_style: true
            aws_access_key_id: <%= File.read('/etc/gitlab/minio/accesskey').strip.to_json %>
            aws_secret_access_key: <%= File.read('/etc/gitlab/minio/secretkey').strip.to_json %>
      packages:
        enabled: true
        object_store:
          enabled: true
          remote_directory: gitlab-packages
          proxy_download: true
          connection:
            provider: AWS
            region: us-east-1
            host: minio.10.181.136.59.nip.io
            endpoint: http://naren-minio-svc.naren-gitlab.svc:9000
            path_style: true
            aws_access_key_id: <%= File.read('/etc/gitlab/minio/accesskey').strip.to_json %>
            aws_secret_access_key: <%= File.read('/etc/gitlab/minio/secretkey').strip.to_json %>
      external_diffs:
        enabled: false
        when: 
        object_store:
          enabled: false
          remote_directory: gitlab-mr-diffs
          proxy_download: true
      terraform_state:
        enabled: false
        object_store:
          enabled: false
          remote_directory: gitlab-terraform-state
          proxy_download: true
      ci_secure_files:
        enabled: false
        object_store:
          enabled: false
          remote_directory: gitlab-ci-secure-files
          proxy_download: true
      dependency_proxy:
        enabled: false
        object_store:
          enabled: false
          remote_directory: gitlab-dependency-proxy
          proxy_download: true
      
      sentry:
        enabled: false
        dsn: 
        clientside_dsn: 
        environment: 
      
      sidekiq:
        log_format: default
      pages:
        enabled: false
        access_control: false
        artifacts_server: true
        path: /srv/gitlab/shared/pages
        host: pages.10.181.136.59.nip.io
        port: 443
        https: true
        secret_file: /etc/gitlab/pages/secret
        external_http: false
        external_https: false
        object_store:
          enabled: true
          remote_directory: gitlab-pages
          connection:
            provider: AWS
            region: us-east-1
            host: minio.10.181.136.59.nip.io
            endpoint: http://naren-minio-svc.naren-gitlab.svc:9000
            path_style: true
            aws_access_key_id: <%= File.read('/etc/gitlab/minio/accesskey').strip.to_json %>
            aws_secret_access_key: <%= File.read('/etc/gitlab/minio/secretkey').strip.to_json %>
        local_store:
          enabled: false
          path: 
      mattermost:
        enabled: false
      ## Registry Integration
      registry:
        enabled: true
        host: registry.10.181.136.59.nip.io
        api_url: http://naren-registry.naren-gitlab.svc:5000
        key: /etc/gitlab/registry/gitlab-registry.key
        issuer: gitlab-issuer
        notification_secret: <%= YAML.load_file("/etc/gitlab/registry/notificationSecret").flatten.first %>
      gitlab_ci:
      ldap:
        enabled: false
      
      omniauth:
        enabled: false
        sync_profile_from_provider: []
        sync_profile_attributes: ["email"]
        allow_single_sign_on: ["saml"]
        block_auto_created_users: true
        auto_link_ldap_user: false
        auto_link_saml_user: false
        external_providers: []
      kerberos:
        enabled: false
      shared:
      gitaly:
        client_path: /home/git/gitaly/bin
        token: <%= File.read('/etc/gitlab/gitaly/gitaly_token').strip.to_json %>
      repositories:
        storages: # You must have at least a `default` storage path.
          default:
            path: /var/opt/gitlab/repo
            gitaly_address: tcp://naren-gitaly-0.naren-gitaly.naren-gitlab.svc:8075
          
      backup:
        path: "tmp/backups"   # Relative paths are relative to Rails.root (default: tmp/backups/)
      gitlab_kas:
        enabled: true
        secret_file: /etc/gitlab/kas/.gitlab_kas_secret
        external_url: "wss://kas.10.181.136.59.nip.io"
        internal_url: "grpc://naren-kas.naren-gitlab.svc:8153"
      gitlab_shell:
        path: /home/git/gitlab-shell/
        hooks_path: /home/git/gitlab-shell/hooks/
        upload_pack: true
        receive_pack: true
      workhorse:
      git:
        bin_path: /usr/bin/git
      webpack:
      monitoring:
        ip_whitelist:
          - 127.0.0.0/8
        sidekiq_exporter:
          enabled: true
          address: 0.0.0.0
          port: 3807
        sidekiq_health_checks:
          enabled: true
          address: 0.0.0.0
          port: 3808
  configure: |
    set -e
    config_dir="/init-config"
    secret_dir="/init-secrets"
    
    for secret in gitaly registry rails-secrets ; do
      mkdir -p "${secret_dir}/${secret}"
      cp -v -r -L "${config_dir}/${secret}/." "${secret_dir}/${secret}/"
    done
    for secret in redis minio objectstorage postgres ldap omniauth smtp kas pages oauth-secrets mailroom ; do
      if [ -e "${config_dir}/${secret}" ]; then
        mkdir -p "${secret_dir}/${secret}"
        cp -v -r -L "${config_dir}/${secret}/." "${secret_dir}/${secret}/"
      fi
    done
    
    
    
# Leave this here - This line denotes end of block to the parser.
---
# Source: my-gitlab/charts/gitlab/charts/gitlab/charts/toolbox/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: naren-toolbox
  namespace: naren-gitlab
  labels:
    app: toolbox
    chart: toolbox-6.1.2
    release: naren
    heritage: Helm
    
data:
  database.yml.erb: |
    
    production:
      main:
        adapter: postgresql
        encoding: unicode
        database: gitlabhq_production
        username: gitlab
        password: <%= File.read('/etc/gitlab/postgres/psql-password-main').strip.to_json %>
        host: "naren-postgresql.naren-gitlab.svc"
        port: 5432
        connect_timeout: 
        keepalives: 
        keepalives_idle: 
        keepalives_interval: 
        keepalives_count: 
        tcp_user_timeout: 
        application_name: 
        prepared_statements: false
        database_tasks: true
        
        
  smtp_settings.rb: |
    
  resque.yml.erb: |
    production:
      url: redis://:<%= ERB::Util::url_encode(File.read("/etc/gitlab/redis/redis-password").strip) %>@naren-redis-master.naren-gitlab.svc:6379
      
      id:
  
  
  
  cable.yml.erb: |
    production:
      url: redis://:<%= ERB::Util::url_encode(File.read("/etc/gitlab/redis/redis-password").strip) %>@naren-redis-master.naren-gitlab.svc:6379
      
      id:
      adapter: redis
  
  
  
  gitlab.yml.erb: |
    production: &base
      gitlab:
        host: gitlab.10.181.136.59.nip.io
        https: true
        max_request_duration_seconds: 57
        impersonation_enabled: 
        application_settings_cache_seconds: 60
        usage_ping_enabled: true
        seat_link_enabled: true
        default_can_create_group: true
        username_changing_enabled: true
        issue_closing_pattern: 
        default_theme: 
        default_projects_features:
          issues: true
          merge_requests: true
          wiki: true
          snippets: true
          builds: true
          container_registry: true
        webhook_timeout: 
        trusted_proxies:
        time_zone: "UTC"        
        email_from: "gitlab@10.181.136.59.nip.io"
        email_display_name: "GitLab"
        email_reply_to: "noreply@10.181.136.59.nip.io"
        email_subject_suffix: ""
      
      artifacts:
        enabled: true
        object_store:
          enabled: true
          remote_directory: gitlab-artifacts
          proxy_download: true
          connection:
            provider: AWS
            region: us-east-1
            host: minio.10.181.136.59.nip.io
            endpoint: http://naren-minio-svc.naren-gitlab.svc:9000
            path_style: true
            aws_access_key_id: <%= File.read('/etc/gitlab/minio/accesskey').strip.to_json %>
            aws_secret_access_key: <%= File.read('/etc/gitlab/minio/secretkey').strip.to_json %>
      lfs:
        enabled: true
        object_store:
          enabled: true
          remote_directory: git-lfs
          proxy_download: true
          connection:
            provider: AWS
            region: us-east-1
            host: minio.10.181.136.59.nip.io
            endpoint: http://naren-minio-svc.naren-gitlab.svc:9000
            path_style: true
            aws_access_key_id: <%= File.read('/etc/gitlab/minio/accesskey').strip.to_json %>
            aws_secret_access_key: <%= File.read('/etc/gitlab/minio/secretkey').strip.to_json %>
      uploads:
        enabled: true
        object_store:
          enabled: true
          remote_directory: gitlab-uploads
          proxy_download: true
          connection:
            provider: AWS
            region: us-east-1
            host: minio.10.181.136.59.nip.io
            endpoint: http://naren-minio-svc.naren-gitlab.svc:9000
            path_style: true
            aws_access_key_id: <%= File.read('/etc/gitlab/minio/accesskey').strip.to_json %>
            aws_secret_access_key: <%= File.read('/etc/gitlab/minio/secretkey').strip.to_json %>
      packages:
        enabled: true
        object_store:
          enabled: true
          remote_directory: gitlab-packages
          proxy_download: true
          connection:
            provider: AWS
            region: us-east-1
            host: minio.10.181.136.59.nip.io
            endpoint: http://naren-minio-svc.naren-gitlab.svc:9000
            path_style: true
            aws_access_key_id: <%= File.read('/etc/gitlab/minio/accesskey').strip.to_json %>
            aws_secret_access_key: <%= File.read('/etc/gitlab/minio/secretkey').strip.to_json %>
      external_diffs:
        enabled: false
        when: 
        object_store:
          enabled: false
          remote_directory: gitlab-mr-diffs
          proxy_download: true
      terraform_state:
        enabled: false
        object_store:
          enabled: false
          remote_directory: gitlab-terraform-state
          proxy_download: true
      ci_secure_files:
        enabled: false
        object_store:
          enabled: false
          remote_directory: gitlab-ci-secure-files
          proxy_download: true
      dependency_proxy:
        enabled: false
        object_store:
          enabled: false
          remote_directory: gitlab-dependency-proxy
          proxy_download: true
      
      sidekiq:
      
      pages:
        enabled: false
        access_control: false
        artifacts_server: true
        path: /srv/gitlab/shared/pages
        host: pages.10.181.136.59.nip.io
        port: 443
        https: true
        secret_file: /etc/gitlab/pages/secret
        external_http: false
        external_https: false
        object_store:
          enabled: true
          remote_directory: gitlab-pages
          connection:
            provider: AWS
            region: us-east-1
            host: minio.10.181.136.59.nip.io
            endpoint: http://naren-minio-svc.naren-gitlab.svc:9000
            path_style: true
            aws_access_key_id: <%= File.read('/etc/gitlab/minio/accesskey').strip.to_json %>
            aws_secret_access_key: <%= File.read('/etc/gitlab/minio/secretkey').strip.to_json %>
        local_store:
          enabled: false
          path: 
      mattermost:
        enabled: false
      ## Registry Integration
      registry:
        enabled: true
        host: registry.10.181.136.59.nip.io
        api_url: http://naren-registry.naren-gitlab.svc:5000
        key: /etc/gitlab/registry/gitlab-registry.key
        issuer: gitlab-issuer
        notification_secret: <%= YAML.load_file("/etc/gitlab/registry/notificationSecret").flatten.first %>
      gitlab_ci:
      ldap:
        enabled: false
      
      omniauth:
        enabled: false
        sync_profile_from_provider: []
        sync_profile_attributes: ["email"]
        allow_single_sign_on: ["saml"]
        block_auto_created_users: true
        auto_link_ldap_user: false
        auto_link_saml_user: false
        external_providers: []
      kerberos:
        enabled: false
      shared:
      gitaly:
        client_path: /home/git/gitaly/bin
        token: <%= File.read('/etc/gitlab/gitaly/gitaly_token').strip.to_json %>
      repositories:
        storages: # You must have at least a `default` storage path.
          default:
            path: /var/opt/gitlab/repo
            gitaly_address: tcp://naren-gitaly-0.naren-gitaly.naren-gitlab.svc:8075
          
      backup:
        path: "tmp/backups"   # Relative paths are relative to Rails.root (default: tmp/backups/)
      gitlab_kas:
        enabled: true
        secret_file: /etc/gitlab/kas/.gitlab_kas_secret
        external_url: "wss://kas.10.181.136.59.nip.io"
        internal_url: "grpc://naren-kas.naren-gitlab.svc:8153"
      gitlab_shell:
        path: /home/git/gitlab-shell/
        hooks_path: /home/git/gitlab-shell/hooks/
        upload_pack: true
        receive_pack: true
        secret_file: /etc/gitlab/shell/.gitlab_shell_secret
      workhorse:
      git:
        bin_path: /usr/bin/git
      webpack:
      monitoring:
        ip_whitelist:
          - 127.0.0.0/8
        sidekiq_exporter:
      extra:
  configure: |
    set -e
    config_dir="/init-config"
    secret_dir="/init-secrets"
    
    for secret in shell gitaly registry rails-secrets ; do
      mkdir -p "${secret_dir}/${secret}"
      cp -v -r -L "${config_dir}/${secret}/." "${secret_dir}/${secret}/"
    done
    for secret in redis minio objectstorage postgres ldap omniauth smtp kas pages oauth-secrets mailroom ; do
      if [ -e "${config_dir}/${secret}" ]; then
        mkdir -p "${secret_dir}/${secret}"
        cp -v -r -L "${config_dir}/${secret}/." "${secret_dir}/${secret}/"
      fi
    done
    
    
    
    if [ ! -f "/${secret_dir}/objectstorage/.s3cfg" ]; then
    cat <<EOF > "/${secret_dir}/.s3cfg"
    [default]
    access_key = $(cat /init-secrets/minio/accesskey)
    secret_key = $(cat /init-secrets/minio/secretkey)
    bucket_location = us-east-1
    host_base = minio.10.181.136.59.nip.io
    host_bucket = minio.10.181.136.59.nip.io/%(bucket)
    default_mime_type = binary/octet-stream
    enable_multipart = True
    multipart_max_chunks = 10000
    multipart_chunk_size_mb = 128
    recursive = True
    recv_chunk = 65536
    send_chunk = 65536
    server_side_encryption = False
    signature_v2 = True
    socket_timeout = 300
    use_mime_magic = False
    verbosity = WARNING
    website_endpoint = https://minio.10.181.136.59.nip.io
    EOF
    else
      mv "/${secret_dir}/objectstorage/.s3cfg" "/${secret_dir}/.s3cfg"
    fi
  configure-gsutil: |
    # The following script is used to configure gsutil when creating backups
    # It provides inputs to the `gsutil config -e` prompt as follows:
    # 1) Path to service account JSON key file
    # 2) Do not set permissions for key file
    # 3) GCP Project ID
    # 4) Decline anonymous usage statistics
    printf "$GOOGLE_APPLICATION_CREDENTIALS\nN\n\nN\n" | gsutil config -e
---
# Source: my-gitlab/charts/gitlab/charts/gitlab/charts/webservice/templates/configmap.yml
apiVersion: v1
kind: ConfigMap
metadata:
  name: naren-webservice
  namespace: naren-gitlab
  labels:
    app: webservice
    chart: webservice-6.1.2
    release: naren
    heritage: Helm
    
data:
  installation_type: |
    gitlab-helm-chart
  database.yml.erb: |
    
    production:
      main:
        adapter: postgresql
        encoding: unicode
        database: gitlabhq_production
        username: gitlab
        password: <%= File.read('/etc/gitlab/postgres/psql-password-main').strip.to_json %>
        host: "naren-postgresql.naren-gitlab.svc"
        port: 5432
        connect_timeout: 
        keepalives: 
        keepalives_idle: 
        keepalives_interval: 
        keepalives_count: 
        tcp_user_timeout: 
        application_name: 
        prepared_statements: false
        database_tasks: true
        
        
  smtp_settings.rb: |
    
  resque.yml.erb: |
    production:
      url: redis://:<%= ERB::Util::url_encode(File.read("/etc/gitlab/redis/redis-password").strip) %>@naren-redis-master.naren-gitlab.svc:6379
      
      id:
  
  
  
  cable.yml.erb: |
    production:
      url: redis://:<%= ERB::Util::url_encode(File.read("/etc/gitlab/redis/redis-password").strip) %>@naren-redis-master.naren-gitlab.svc:6379
      
      id:
      adapter: redis
  
  
  
  gitlab.yml.erb: |
    production: &base
      gitlab:
        host: gitlab.10.181.136.59.nip.io
        https: true
        max_request_duration_seconds: 57
        impersonation_enabled: 
        application_settings_cache_seconds: 60
        usage_ping_enabled: true
        seat_link_enabled: true
        default_can_create_group: true
        username_changing_enabled: true
        issue_closing_pattern: 
        default_theme: 
        default_projects_features:
          issues: true
          merge_requests: true
          wiki: true
          snippets: true
          builds: true
          container_registry: true
        webhook_timeout: 
        trusted_proxies:
        time_zone: "UTC"        
        email_from: "gitlab@10.181.136.59.nip.io"
        email_display_name: "GitLab"
        email_reply_to: "noreply@10.181.136.59.nip.io"
        email_subject_suffix: ""
      
      gravatar:
        plain_url: 
        ssl_url: 
      extra:
        
        
        
        
        
        
      artifacts:
        enabled: true
        object_store:
          enabled: true
          remote_directory: gitlab-artifacts
          proxy_download: true
          connection:
            provider: AWS
            region: us-east-1
            host: minio.10.181.136.59.nip.io
            endpoint: http://naren-minio-svc.naren-gitlab.svc:9000
            path_style: true
            aws_access_key_id: <%= File.read('/etc/gitlab/minio/accesskey').strip.to_json %>
            aws_secret_access_key: <%= File.read('/etc/gitlab/minio/secretkey').strip.to_json %>
      lfs:
        enabled: true
        object_store:
          enabled: true
          remote_directory: git-lfs
          proxy_download: true
          connection:
            provider: AWS
            region: us-east-1
            host: minio.10.181.136.59.nip.io
            endpoint: http://naren-minio-svc.naren-gitlab.svc:9000
            path_style: true
            aws_access_key_id: <%= File.read('/etc/gitlab/minio/accesskey').strip.to_json %>
            aws_secret_access_key: <%= File.read('/etc/gitlab/minio/secretkey').strip.to_json %>
      uploads:
        enabled: true
        object_store:
          enabled: true
          remote_directory: gitlab-uploads
          proxy_download: true
          connection:
            provider: AWS
            region: us-east-1
            host: minio.10.181.136.59.nip.io
            endpoint: http://naren-minio-svc.naren-gitlab.svc:9000
            path_style: true
            aws_access_key_id: <%= File.read('/etc/gitlab/minio/accesskey').strip.to_json %>
            aws_secret_access_key: <%= File.read('/etc/gitlab/minio/secretkey').strip.to_json %>
      packages:
        enabled: true
        object_store:
          enabled: true
          remote_directory: gitlab-packages
          proxy_download: true
          connection:
            provider: AWS
            region: us-east-1
            host: minio.10.181.136.59.nip.io
            endpoint: http://naren-minio-svc.naren-gitlab.svc:9000
            path_style: true
            aws_access_key_id: <%= File.read('/etc/gitlab/minio/accesskey').strip.to_json %>
            aws_secret_access_key: <%= File.read('/etc/gitlab/minio/secretkey').strip.to_json %>
      external_diffs:
        enabled: false
        when: 
        object_store:
          enabled: false
          remote_directory: gitlab-mr-diffs
          proxy_download: true
      terraform_state:
        enabled: false
        object_store:
          enabled: false
          remote_directory: gitlab-terraform-state
          proxy_download: true
      ci_secure_files:
        enabled: false
        object_store:
          enabled: false
          remote_directory: gitlab-ci-secure-files
          proxy_download: true
      dependency_proxy:
        enabled: false
        object_store:
          enabled: false
          remote_directory: gitlab-dependency-proxy
          proxy_download: true
      
      sentry:
        enabled: false
        dsn: 
        clientside_dsn: 
        environment: 
      
      sidekiq:
      pages:
        enabled: false
        access_control: false
        artifacts_server: true
        path: /srv/gitlab/shared/pages
        host: pages.10.181.136.59.nip.io
        port: 443
        https: true
        secret_file: /etc/gitlab/pages/secret
        external_http: false
        external_https: false
        object_store:
          enabled: true
          remote_directory: gitlab-pages
          connection:
            provider: AWS
            region: us-east-1
            host: minio.10.181.136.59.nip.io
            endpoint: http://naren-minio-svc.naren-gitlab.svc:9000
            path_style: true
            aws_access_key_id: <%= File.read('/etc/gitlab/minio/accesskey').strip.to_json %>
            aws_secret_access_key: <%= File.read('/etc/gitlab/minio/secretkey').strip.to_json %>
        local_store:
          enabled: false
          path: 
      mattermost:
        enabled: false
      gitlab_ci:
      ldap:
        enabled: false
      
      omniauth:
        enabled: false
        sync_profile_from_provider: []
        sync_profile_attributes: ["email"]
        allow_single_sign_on: ["saml"]
        block_auto_created_users: true
        auto_link_ldap_user: false
        auto_link_saml_user: false
        external_providers: []
      kerberos:
        enabled: false
      shared:
      gitaly:
        client_path: /home/git/gitaly/bin
        token: <%= File.read('/etc/gitlab/gitaly/gitaly_token').strip.to_json %>
      repositories:
        storages: # You must have at least a `default` storage path.
          default:
            path: /var/opt/gitlab/repo
            gitaly_address: tcp://naren-gitaly-0.naren-gitaly.naren-gitlab.svc:8075
          
      backup:
        path: "tmp/backups"   # Relative paths are relative to Rails.root (default: tmp/backups/)
      gitlab_kas:
        enabled: true
        secret_file: /etc/gitlab/kas/.gitlab_kas_secret
        external_url: "wss://kas.10.181.136.59.nip.io"
        internal_url: "grpc://naren-kas.naren-gitlab.svc:8153"
      gitlab_shell:
        path: /home/git/gitlab-shell/
        hooks_path: /home/git/gitlab-shell/hooks/
        upload_pack: true
        receive_pack: true
        ssh_port: 22
        secret_file: /etc/gitlab/shell/.gitlab_shell_secret
      workhorse:
        secret_file: /etc/gitlab/gitlab-workhorse/secret
      git:
        bin_path: /usr/bin/git
      webpack:
      monitoring:
        ip_whitelist:
          - 0.0.0.0/0
        web_exporter:
          enabled: true
          address: 0.0.0.0
          port: 8083
        sidekiq_exporter:
      shutdown:
        blackout_seconds: <%= ENV["SHUTDOWN_BLACKOUT_SECONDS"] %>
      rack_attack:
        git_basic_auth:
      ## Registry Integration
      registry:
        enabled: true
        host: registry.10.181.136.59.nip.io
        api_url: http://naren-registry.naren-gitlab.svc:5000
        key: /etc/gitlab/registry/gitlab-registry.key
        issuer: gitlab-issuer
        notification_secret: <%= YAML.load_file("/etc/gitlab/registry/notificationSecret").flatten.first %>
      smartcard:
        enabled: false
        ca_file: '/etc/gitlab/rails-secrets/smartcard-ca.crt'
        client_certificate_required_host: smartcard.10.181.136.59.nip.io
        client_certificate_required_port: 443
        san_extensions: false
        required_for_git_access: false
  configure: |
    set -e
    config_dir="/init-config"
    secret_dir="/init-secrets"
    
    for secret in shell gitaly registry rails-secrets gitlab-workhorse ; do
      mkdir -p "${secret_dir}/${secret}"
      cp -v -r -L "${config_dir}/${secret}/." "${secret_dir}/${secret}/"
    done
    for secret in redis minio objectstorage postgres ldap omniauth smtp kas pages oauth-secrets mailroom ; do
      if [ -e "${config_dir}/${secret}" ]; then
        mkdir -p "${secret_dir}/${secret}"
        cp -v -r -L "${config_dir}/${secret}/." "${secret_dir}/${secret}/"
      fi
    done
---
# Source: my-gitlab/charts/gitlab/charts/gitlab/charts/webservice/templates/configmap.yml
apiVersion: v1
kind: ConfigMap
metadata:
  name: naren-workhorse-default
  namespace: naren-gitlab
  labels:
    app: webservice
    chart: webservice-6.1.2
    release: naren
    heritage: Helm
    
data:
  installation_type: |
    gitlab-helm-chart
  workhorse-config.toml.tpl: |
    shutdown_timeout = "61s"
    [redis]
    URL = "redis://naren-redis-master.naren-gitlab.svc:6379"
    Password = {% file.Read "/etc/gitlab/redis/redis-password" | strings.TrimSpace | data.ToJSON %}
    {%- $supported_providers := slice "AWS" "AzureRM" -%}
    {%- $provider := "" -%}
    {%- $aws_access_key_id := "" -%}
    {%- $aws_secret_access_key := "" -%}
    {%- $azure_storage_account_name := "" -%}
    {%- $azure_storage_access_key := "" -%}
    {%- if file.Exists "/etc/gitlab/minio/accesskey" %}
      {%- $provider = "AWS" -%}
      {%- $aws_access_key_id = file.Read "/etc/gitlab/minio/accesskey" | strings.TrimSpace -%}
      {%- $aws_secret_access_key = file.Read "/etc/gitlab/minio/secretkey" | strings.TrimSpace -%}
    {%- end %}
    {%- if file.Exists "/etc/gitlab/objectstorage/object_store" %}
      {%- $connection := file.Read "/etc/gitlab/objectstorage/object_store" | strings.TrimSpace | data.YAML -%}
      {%- $provider = $connection.provider -%}
      {%- if has $connection "aws_access_key_id" -%}
        {%- $aws_access_key_id = $connection.aws_access_key_id -%}
        {%- $aws_secret_access_key = $connection.aws_secret_access_key -%}
      {%- else if has $connection "azure_storage_account_name" -%}
        {%- $azure_storage_account_name = $connection.azure_storage_account_name -%}
        {%- $azure_storage_access_key = $connection.azure_storage_access_key -%}
      {%- end -%}
    {%- end %}
    {%- if has $supported_providers $provider %}
    [object_storage]
    provider = "{% $provider %}"
    {%-   if eq $provider "AWS" %}
    # AWS / S3 object storage configuration.
    [object_storage.s3]
    # access/secret can be blank!
    aws_access_key_id = {% $aws_access_key_id | strings.TrimSpace | data.ToJSON %}
    aws_secret_access_key = {% $aws_secret_access_key | strings.TrimSpace | data.ToJSON %}
    {%-   else if eq $provider "AzureRM" %}
    # Azure Blob storage configuration.
    [object_storage.azurerm]
    azure_storage_account_name = "{% $azure_storage_account_name %}"
    azure_storage_access_key = "{% $azure_storage_access_key %}"
    {%-   end %}
    {%- end %}
    [image_resizer]
    max_scaler_procs = 2
    max_filesize = 250000
  configure: |
      set -e
      mkdir -p /init-secrets-workhorse/gitlab-workhorse
      cp -v -r -L /init-config/gitlab-workhorse/secret /init-secrets-workhorse/gitlab-workhorse/secret
      mkdir -p /init-secrets-workhorse/redis
      cp -v -r -L /init-config/redis/redis-password /init-secrets-workhorse/redis/
      if [ -d /init-config/minio ]; then
        mkdir -p /init-secrets-workhorse/minio
        cp -v -r -L /init-config/minio/* /init-secrets-workhorse/minio/
      fi
# Leave this here - This line denotes end of block to the parser.
---
# Source: my-gitlab/charts/gitlab/charts/gitlab/charts/webservice/templates/tests/tests.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: naren-webservice-tests
  namespace: naren-gitlab
data:
  test_login: |
    set -e
    echo 'Start Test'
    endpoint="https://gitlab.10.181.136.59.nip.io"
    cookie_read="-c /tmp/test_login.cookie"
    cookie_readwrite="$cookie_read -b /tmp/test_login.cookie"

    signin_url="$endpoint/users/sign_in"
    echo "Login to create a session: $signin_url"
    csrf=$(curl -L $signin_url --fail -s $cookie_read | grep -Po '<meta.*name="csrf-token".*content="\K[a-zA-Z0-9\+=\-\/]*')
    curl -X POST $signin_url -s $cookie_readwrite -F "authenticity_token=$csrf" -F 'user[login]=root' -F "user[password]=$(cat /initial_root_password)"

    profile_url="$endpoint/-/profile"
    echo "Confirm session valid: $profile_url"
    profile_status=$(curl -L -s -o /tmp/profile_output -w "%{http_code}" $cookie_readwrite $profile_url)

    if [ "$profile_status" != "200" ]; then
      echo "Error: Session Invalid"
      cat /tmp/profile_output
      exit 1
    fi

    echo 'Test Passed'
    exit 0

# Leave this here - This line denotes end of block to the parser.
---
# Source: my-gitlab/charts/gitlab/charts/minio/templates/minioconfig_configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: naren-minio-config-cm
  namespace: naren-gitlab
  labels:
    app: minio
    chart: minio-0.4.3
    release: naren
    heritage: Helm
    
data:
  initialize: |-
    #!/bin/sh
    # minio/mc container has Busybox Ash, be sure to be POSIX compliant and avoid Bash-isms
    set -e ; # Have script exit in the event of a failed command.
    
    # connectToMinio
    # Use a check-sleep-check loop to wait for Minio service to be available
    connectToMinio() {
      set -e ; # fail if we can't read the keys.
      ACCESS=$(cat /config/accesskey) ; SECRET=$(cat /config/secretkey) ;
      set +e ; # The connections to minio are allowed to fail.
      echo "Connecting to Minio server: http://$MINIO_ENDPOINT:$MINIO_PORT" ;
      MC_COMMAND="mc config host add myminio http://$MINIO_ENDPOINT:$MINIO_PORT $ACCESS $SECRET" ;
      $MC_COMMAND ;
      STATUS=$? ;
      until [ $STATUS -eq 0 ] ;
      do
        sleep 1 ; # 1 second intervals between attempts
        $MC_COMMAND ;
        STATUS=$? ;
      done ;
      set -e ; # reset `e` as active
      return 0
    }
    
    # checkBucketExists ($bucket)
    # Check if the bucket exists, by using the exit code of `mc ls`
    checkBucketExists() {
      BUCKET=$1
      CMD=$(/usr/bin/mc ls myminio/$BUCKET > /dev/null 2>&1)
      return $?
    }
    
    # createBucket ($bucket, $policy, $purge)
    # Ensure bucket exists, purging if asked to
    createBucket() {
      BUCKET=$1
      POLICY=$2
      PURGE=$3
    
    
      # Purge the bucket, if set & exists
      # Since PURGE is user input, check explicitly for `true`
      if [ $PURGE = true ]; then
        if checkBucketExists $BUCKET ; then
          echo "Purging bucket '$BUCKET'."
          set +e ; # don't exit if this fails
          /usr/bin/mc rm -r --force myminio/$BUCKET
          set -e ; # reset `e` as active
        else
          echo "Bucket '$BUCKET' does not exist, skipping purge."
        fi
      fi
    
      # Create the bucket if it does not exist
      if ! checkBucketExists $BUCKET ; then
        echo "Creating bucket '$BUCKET'"
        /usr/bin/mc mb myminio/$BUCKET
      else
        echo "Bucket '$BUCKET' already exists."
      fi
    
      # At this point, the bucket should exist, skip checking for existance
      # Set policy on the bucket
      echo "Setting policy of bucket '$BUCKET' to '$POLICY'."
      /usr/bin/mc policy $POLICY myminio/$BUCKET
    }
    
    connectToMinio
    createBucket registry none false
    createBucket git-lfs none false
    createBucket runner-cache none false
    createBucket gitlab-uploads none false
    createBucket gitlab-artifacts none false
    createBucket gitlab-backups none false
    createBucket gitlab-packages none false
    createBucket tmp none false
    createBucket gitlab-mr-diffs none false
    createBucket gitlab-terraform-state none false
    createBucket gitlab-ci-secure-files none false
    createBucket gitlab-dependency-proxy none false
    createBucket gitlab-pages none false
    
  configure: |-
    sed -e 's@ACCESS_KEY@'"$(cat /config/accesskey)"'@' -e 's@SECRET_KEY@'"$(cat /config/secretkey)"'@' /config/config.json > /minio/config.json
  config.json: |-
    {
      "version": "20",
      "credential": {
        "accessKey": "ACCESS_KEY",
        "secretKey": "SECRET_KEY"
      },
      "region": "us-east-1",
      "browser": "on",
      "domain": "",
      "logger": {
        "console": {
          "enable": true
        },
        "file": {
          "enable": false,
          "fileName": ""
        }
      },
      "notify": {
        "amqp": {
          "1": {
            "enable": false,
            "url": "",
            "exchange": "",
            "routingKey": "",
            "exchangeType": "",
            "deliveryMode": 0,
            "mandatory": false,
            "immediate": false,
            "durable": false,
            "internal": false,
            "noWait": false,
            "autoDeleted": false
          }
        },
        "nats": {
          "1": {
            "enable": false,
            "address": "",
            "subject": "",
            "username": "",
            "password": "",
            "token": "",
            "secure": false,
            "pingInterval": 0,
            "streaming": {
              "enable": false,
              "clusterID": "",
              "clientID": "",
              "async": false,
              "maxPubAcksInflight": 0
            }
          }
        },
        "elasticsearch": {
          "1": {
            "enable": false,
            "format": "namespace",
            "url": "",
            "index": ""
          }
        },
        "redis": {
          "1": {
            "enable": false,
            "format": "namespace",
            "address": "",
            "password": "",
            "key": ""
          }
        },
        "postgresql": {
          "1": {
            "enable": false,
            "format": "namespace",
            "connectionString": "",
            "table": "",
            "host": "",
            "port": "",
            "user": "",
            "password": "",
            "database": ""
          }
        },
        "kafka": {
          "1": {
            "enable": false,
            "brokers": null,
            "topic": ""
          }
        },
        "webhook": {
          "1": {
            "enable": false,
            "endpoint": ""
          }
        },
        "mysql": {
          "1": {
            "enable": false,
            "format": "namespace",
            "dsnString": "",
            "table": "",
            "host": "",
            "port": "",
            "user": "",
            "password": "",
            "database": ""
          }
        },
        "mqtt": {
          "1": {
            "enable": false,
            "broker": "",
            "topic": "",
            "qos": 0,
            "clientId": "",
            "username": "",
            "password": ""
          }
        }
      }
    }
# Blank line to signal end of Block
---
# Source: my-gitlab/charts/gitlab/charts/redis/templates/configmap-scripts.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: naren-redis-scripts
  namespace: "naren-gitlab"
  labels:
    app: redis
    chart: redis-11.3.4
    heritage: Helm
    release: naren
data:
  start-master.sh: |
    #!/bin/bash
    useradd redis
    chown -R redis /data
    if [[ -n $REDIS_PASSWORD_FILE ]]; then
      password_aux=`cat ${REDIS_PASSWORD_FILE}`
      export REDIS_PASSWORD=$password_aux
    fi
    if [[ ! -f /opt/bitnami/redis/etc/master.conf ]];then
      cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
    fi
    if [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then
      cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--requirepass" "${REDIS_PASSWORD}")
    ARGS+=("--masterauth" "${REDIS_PASSWORD}")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
    exec /run.sh "${ARGS[@]}"
---
# Source: my-gitlab/charts/gitlab/charts/redis/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: naren-redis
  namespace: "naren-gitlab"
  labels:
    app: redis
    chart: redis-11.3.4
    heritage: Helm
    release: naren
data:
  redis.conf: |-
    # User-supplied configuration:
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
  master.conf: |-
    dir /data
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
  replica.conf: |-
    dir /data
    slave-read-only yes
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
---
# Source: my-gitlab/charts/gitlab/charts/redis/templates/health-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: naren-redis-health
  namespace: "naren-gitlab"
  labels:
    app: redis
    chart: redis-11.3.4
    heritage: Helm
    release: naren
data:
  ping_readiness_local.sh: |-
    #!/bin/bash
    password_aux=`cat ${REDIS_PASSWORD_FILE}`
    export REDIS_PASSWORD=$password_aux
    no_auth_warning=$([[ "$(redis-cli --version)" =~ (redis-cli 5.*) ]] && echo --no-auth-warning)
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -a $REDIS_PASSWORD $no_auth_warning \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local.sh: |-
    #!/bin/bash
    password_aux=`cat ${REDIS_PASSWORD_FILE}`
    export REDIS_PASSWORD=$password_aux
    no_auth_warning=$([[ "$(redis-cli --version)" =~ (redis-cli 5.*) ]] && echo --no-auth-warning)
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -a $REDIS_PASSWORD $no_auth_warning \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$response" != "PONG" ] && [ "$response" != "LOADING Redis is loading the dataset in memory" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_master.sh: |-
    #!/bin/bash
    password_aux=`cat ${REDIS_MASTER_PASSWORD_FILE}`
    export REDIS_MASTER_PASSWORD=$password_aux
    no_auth_warning=$([[ "$(redis-cli --version)" =~ (redis-cli 5.*) ]] && echo --no-auth-warning)
     response=$(
      timeout -s 3 $1 \
      redis-cli \
        -a $REDIS_MASTER_PASSWORD $no_auth_warning \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_master.sh: |-
    #!/bin/bash
    password_aux=`cat ${REDIS_MASTER_PASSWORD_FILE}`
    export REDIS_MASTER_PASSWORD=$password_aux
    no_auth_warning=$([[ "$(redis-cli --version)" =~ (redis-cli 5.*) ]] && echo --no-auth-warning)
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -a $REDIS_MASTER_PASSWORD $no_auth_warning \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$response" != "PONG" ] && [ "$response" != "LOADING Redis is loading the dataset in memory" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
---
# Source: my-gitlab/charts/gitlab/charts/registry/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: naren-registry
  namespace: naren-gitlab
  labels:
    app: registry
    chart: registry-0.7.0
    release: naren
    heritage: Helm
    
data:
  configure: |-
    if [ -e /config/accesskey ] ; then
      sed -e 's@ACCESS_KEY@'"$(cat /config/accesskey)"'@' -e 's@SECRET_KEY@'"$(cat /config/secretkey)"'@' /config/config.yml > /registry/config.yml
    else
      cp -v -r -L /config/config.yml  /registry/config.yml
    fi
    # Place the `http.secret` value from the kubernetes secret
    sed -i -e 's@HTTP_SECRET@'"$(cat /config/httpSecret)"'@' /registry/config.yml
    # Populate sensitive registry notification secrets in the config file
    if [ -d /config/notifications ]; then
      for i in /config/notifications/*; do
        filename=$(basename $i);
        sed -i -e 's@'"${filename}"'@'"$(cat $i)"'@' /registry/config.yml;
      done
    fi
    # Insert any provided `storage` block from kubernetes secret
    if [ -d /config/storage ]; then
      # Copy contents of storage secret(s)
      mkdir -p /registry/storage
      cp -v -r -L /config/storage/* /registry/storage/
      # Ensure there is a new line in the end
      echo '' >> /registry/storage/config
      # Default `delete.enabled: true` if not present.
      ## Note: busybox grep doesn't support multiline, so we chain `egrep`.
      if ! $(egrep -A1 '^delete:\s*$' /registry/storage/config | egrep -q '\s{2,4}enabled:') ; then
        echo 'delete:' >> /registry/storage/config
        echo '  enabled: true' >> /registry/storage/config
      fi
      # Indent /registry/storage/config 2 spaces before inserting into config.yml
      sed -i 's/^/  /' /registry/storage/config
      # Insert into /registry/config.yml after `storage:`
      sed -i '/^storage:/ r /registry/storage/config' /registry/config.yml
      # Remove the now extraneous `config` file
      rm /registry/storage/config
    fi
    # Copy any middleware.storage if present
    if [ -d /config/middleware.storage ]; then
      cp -v -r -L /config/middleware.storage  /registry/middleware.storage
    fi
    # Set to known path, to used ConfigMap
    cat /config/certificate.crt > /registry/certificate.crt
    # Copy the optional profiling keyfile to the expected location
    if [ -f /config/profiling-key.json ]; then
      cp /config/profiling-key.json /registry/profiling-key.json
    fi
    # Insert Database password, if enabled
    if [ -f /config/database_password ] ; then
      sed -i -e 's@DB_PASSWORD_FILE@'"$(cat /config/database_password)"'@' /registry/config.yml
    fi
     # Insert import notification secret, if migration is enabled
    if [ -f /config/registry/notificationSecret ] ; then
      sed -i -e 's@NOTIFICATION_SECRET@'"$(cat /config/registry/notificationSecret | tr -d '[]"')"'@' /registry/config.yml
    fi
    # Copy the database TLS connection files to the expected location and set permissions
    if [ -d /config/ssl ]; then
      cp -r /config/ssl/ /registry/ssl
      chmod 700 /registry/ssl
      chmod 600 /registry/ssl/*.pem
    fi
  config.yml: |
    version: 0.1
    log:
      fields:
        service: registry
      level: info
    http:
      debug:
        addr: ':5001'
        prometheus:
          enabled: false
          path: /metrics
      draintimeout: 0
      headers:
        X-Content-Type-Options: [nosniff]
      addr: :5000
      secret: "HTTP_SECRET"
      relativeurls: false
    health:
      storagedriver:
        enabled: false
        interval: 10s
        threshold: 3
    auth:
      token:
        realm: https://gitlab.10.181.136.59.nip.io/jwt/auth
        service: container_registry
        issuer: "gitlab-issuer"
        # This is provided from the initContainer execution, at a known path.
        rootcertbundle: /etc/docker/registry/certificate.crt
        autoredirect: false
    compatibility:
      schema1:
        enabled: false
    validation:
      disabled: true
      manifests:
        referencelimit: 0
        payloadsizelimit: 0
        urls:
          allow:
          deny:
    
    notifications:
    reporting:
    profiling:
    storage:
      maintenance:
        readonly:
          enabled: false
        uploadpurging:
          enabled: true
          age: 168h
          interval: 24h
          dryrun: false
      s3:
        accesskey: "ACCESS_KEY"
        secretkey: "SECRET_KEY"
        region: us-east-1
        regionendpoint: http://naren-minio-svc.naren-gitlab.svc:9000
        bucket: registry
        secure: true
        v4auth: true
        rootdirectory: /
      cache:
        blobdescriptor: 'inmemory'
      delete:
        enabled: true
      redirect:
        disable: true
    middleware:
    
    gc:
      disabled: true
    migration:
      enabled: false
      testslowimport: 0s

  # minimal configuration, in order to do database migrations
  migrations-config.yml: |
    version: 0.1
    log:
      fields:
        service: registry
      level: info
---
# Source: my-gitlab/charts/gitlab/templates/chart-info.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: naren-gitlab-chart-info
  namespace: naren-gitlab
  labels:
    app: gitlab
    chart: gitlab-6.1.2
    release: naren
    heritage: Helm
    
data:
  gitlabVersion: "15.1.2"
  gitlabChartVersion: "6.1.2"
---
# Source: my-gitlab/charts/gitlab/templates/initdb-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: naren-postgresql-init-db
  namespace: naren-gitlab
  labels:
    app: gitlab
    chart: gitlab-6.1.2
    release: naren
    heritage: Helm
    
data:
  init_revision.sh: |
    if [[ ! -f "$POSTGRESQL_VOLUME_DIR/.gitlab_1_scripts_initialized" ]] ; then
      rm -f "$POSTGRESQL_VOLUME_DIR/.user_scripts_initialized"
      touch "$POSTGRESQL_VOLUME_DIR/.gitlab_1_scripts_initialized"
    fi
  enable_extensions.sh: |
    [[ -n "${POSTGRES_POSTGRES_PASSWORD_FILE:-}" ]] && POSTGRES_POSTGRES_PASSWORD=$(cat ${POSTGRES_POSTGRES_PASSWORD_FILE})
    PGPASSWORD=${POSTGRES_POSTGRES_PASSWORD} psql -d gitlabhq_production -U postgres -c 'CREATE EXTENSION IF NOT EXISTS pg_trgm; CREATE EXTENSION IF NOT EXISTS btree_gist;'
# Leave this here - This line denotes end of block to the parser.
---
# Source: my-gitlab/charts/gitlab/charts/minio/templates/minio_pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: naren-minio
  namespace: naren-gitlab
  labels:
    app: minio
    chart: minio-0.4.3
    release: naren
    heritage: Helm
    
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "7Gi"
  storageClassName: "local-path"
  selector:
---
# Source: my-gitlab/charts/gitlab/charts/gitlab-runner/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: "Role"
metadata:
  name: naren-gitlab-runner
  labels:
    app: naren-gitlab-runner
    chart: gitlab-runner-0.41.0
    release: "naren"
    heritage: "Helm"
  namespace: "naren-gitlab"
rules:
- apiGroups: [""]
  resources: ["*"]
  verbs: ["*"]
---
# Source: my-gitlab/charts/gitlab/charts/gitlab-runner/templates/role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: "RoleBinding"
metadata:
  name: naren-gitlab-runner
  labels:
    app: naren-gitlab-runner
    chart: gitlab-runner-0.41.0
    release: "naren"
    heritage: "Helm"
  namespace: "naren-gitlab"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: "Role"
  name: naren-gitlab-runner
subjects:
- kind: ServiceAccount
  name: naren-gitlab-runner
  namespace: "naren-gitlab"
---
# Source: my-gitlab/charts/gitlab/charts/gitlab/charts/gitaly/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: naren-gitaly
  namespace: naren-gitlab
  labels:
    app: gitaly
    chart: gitaly-6.1.2
    release: naren
    heritage: Helm
    
    
  annotations:
    
spec:
  type: ClusterIP
  clusterIP: "None"
  ports:
    - port: 8075
      name: gitaly
      targetPort: grpc-gitaly
    - port: 9236
      name: http-metrics
      targetPort: http-metrics
  selector:
    app: gitaly
    release: naren
---
# Source: my-gitlab/charts/gitlab/charts/gitlab/charts/gitlab-exporter/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: naren-gitlab-exporter
  namespace: naren-gitlab
  labels:
    app: gitlab-exporter
    chart: gitlab-exporter-6.1.2
    release: naren
    heritage: Helm
    
    
  annotations:
    
spec:
  type: ClusterIP
  ports:
    - port: 9168
      targetPort: http-metrics
      protocol: TCP
      name: http-metrics
  selector:
    app: gitlab-exporter
    release: naren
---
# Source: my-gitlab/charts/gitlab/charts/gitlab/charts/gitlab-shell/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: naren-gitlab-shell
  namespace: naren-gitlab
  labels:
    app: gitlab-shell
    chart: gitlab-shell-6.1.2
    release: naren
    heritage: Helm
    
    
  annotations:
    
spec:
  type: ClusterIP
  ports:
    - port: 22
      targetPort: 2222
      protocol: TCP
      name: ssh
  selector:
    app: gitlab-shell
    release: naren
---
# Source: my-gitlab/charts/gitlab/charts/gitlab/charts/kas/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: naren-kas
  namespace: naren-gitlab
  labels:
    app: kas
    chart: kas-6.1.2
    release: naren
    heritage: Helm
    
    
  annotations:
    
spec:
  type: "ClusterIP"
  ports:
    - port: 8150
      targetPort: 8150
      protocol: TCP
      name: tcp-kas-external-api
    - port: 8153
      targetPort: 8153
      protocol: TCP
      name: tcp-kas-internal-api
    - port: 8154
      targetPort: 8154
      protocol: TCP
      name: tcp-kas-k8s-api
    - port: 8151
      targetPort: http-metrics
      protocol: TCP
      name: http-metrics
  selector:
    app: kas
    release: naren
---
# Source: my-gitlab/charts/gitlab/charts/gitlab/charts/webservice/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: naren-webservice-default
  namespace: naren-gitlab
  labels:
    app: webservice
    chart: webservice-6.1.2
    release: naren
    heritage: Helm
    
    gitlab.com/webservice-name: default
    
  annotations:
    
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http-webservice
      protocol: TCP
      name: http-webservice
    - port: 8181
      targetPort: http-workhorse
      protocol: TCP
      name: http-workhorse
    - port: 8083
      targetPort: http-metrics-ws
      protocol: TCP
      name: http-metrics-ws
  selector:
    app: webservice
    release: naren
    
    gitlab.com/webservice-name: default
---
# Source: my-gitlab/charts/gitlab/charts/minio/templates/minio_svc.yaml
kind: Service
apiVersion: v1
metadata:
  name: naren-minio-svc
  namespace: naren-gitlab
  labels:
    app: minio
    chart: minio-0.4.3
    release: naren
    heritage: Helm
    
  annotations:
    
spec:
  type: ClusterIP
  selector:
    app: minio
    release: naren
    component: app
  ports:
    - name: service
      port: 9000
      targetPort: 9000
      protocol: TCP
---
# Source: my-gitlab/charts/gitlab/charts/postgresql/templates/metrics-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: naren-postgresql-metrics
  labels:
    app: postgresql
    chart: postgresql-8.9.4
    release: "naren"
    heritage: "Helm"
  annotations:
    prometheus.io/port: "9187"
    prometheus.io/scrape: "true"
spec:
  type: ClusterIP
  ports:
    - name: http-metrics
      port: 9187
      targetPort: http-metrics
  selector:
    app: postgresql
    release: naren
    role: master
---
# Source: my-gitlab/charts/gitlab/charts/postgresql/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: naren-postgresql-headless
  labels:
    app: postgresql
    chart: postgresql-8.9.4
    release: "naren"
    heritage: "Helm"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app: postgresql
    release: "naren"
---
# Source: my-gitlab/charts/gitlab/charts/postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: naren-postgresql
  labels:
    app: postgresql
    chart: postgresql-8.9.4
    release: "naren"
    heritage: "Helm"
  annotations:
spec:
  type: ClusterIP
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app: postgresql
    release: "naren"
    role: master
---
# Source: my-gitlab/charts/gitlab/charts/redis/templates/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: naren-redis-headless
  namespace: "naren-gitlab"
  labels:
    app: redis
    chart: redis-11.3.4
    release: naren
    heritage: Helm
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: redis
      port: 6379
      targetPort: redis
  selector:
    app: redis
    release: naren
---
# Source: my-gitlab/charts/gitlab/charts/redis/templates/metrics-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: naren-redis-metrics
  namespace: "naren-gitlab"
  labels:
    app: redis
    chart: redis-11.3.4
    release: naren
    heritage: Helm
    app.kubernetes.io/component: "metrics"
spec:
  type: ClusterIP
  
  ports:
    - name: metrics
      port: 9121
      targetPort: metrics
  selector:
    app: redis
    release: naren
---
# Source: my-gitlab/charts/gitlab/charts/redis/templates/redis-master-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: naren-redis-master
  namespace: "naren-gitlab"
  labels:
    app: redis
    chart: redis-11.3.4
    release: naren
    heritage: Helm
spec:
  type: ClusterIP
  ports:
    - name: redis
      port: 6379
      targetPort: redis
  selector:
    app: redis
    release: naren
    role: master
---
# Source: my-gitlab/charts/gitlab/charts/registry/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: naren-registry
  namespace: naren-gitlab
  labels:
    app: registry
    chart: registry-0.7.0
    release: naren
    heritage: Helm
    
    
  annotations:
    
spec:
  type: ClusterIP
  ports:
  - port: 5000
    targetPort: http
    protocol: TCP
    name: registry
  selector:
    app: registry
    release: naren
---
# Source: my-gitlab/charts/gitlab/charts/gitlab-runner/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: naren-gitlab-runner
  labels:
    app: naren-gitlab-runner
    chart: gitlab-runner-0.41.0
    release: "naren"
    heritage: "Helm"
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: naren-gitlab-runner
  template:
    metadata:
      labels:
        app: naren-gitlab-runner
        chart: gitlab-runner-0.41.0
        release: "naren"
        heritage: "Helm"
      annotations:
        checksum/configmap: a2b94d2c10ad71f6863d749e04ba72c13cc3b9f922d855e99d65501c7d8c9be3
        checksum/secrets: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
        gitlab.com/prometheus_port: "9252"
        gitlab.com/prometheus_scrape: "true"
    spec:
      securityContext:
        runAsUser: 100
        fsGroup: 65533
      terminationGracePeriodSeconds: 3600
      serviceAccountName: naren-gitlab-runner
      containers:
      - name: naren-gitlab-runner
        image: gitlab/gitlab-runner:alpine-v15.0.0
        imagePullPolicy: "IfNotPresent"
        securityContext:
          allowPrivilegeEscalation: false
        
        
        command: ["/usr/bin/dumb-init", "--", "/bin/bash", "/configmaps/entrypoint"]
        env:
                
        - name: CI_SERVER_URL
          value: https://gitlab.10.181.136.59.nip.io
        - name: CLONE_URL
          value: ""
        - name: RUNNER_EXECUTOR
          value: "kubernetes"
        - name: REGISTER_LOCKED
          value: "false"
        - name: RUNNER_TAG_LIST
          value: ""
        - name: KUBERNETES_NAMESPACE
          value: "naren-gitlab"
        livenessProbe:
          exec:
            command: ["/bin/bash", "/configmaps/check-live"]
          initialDelaySeconds: 60
          timeoutSeconds: 1
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          exec:
            command: ["/usr/bin/pgrep","gitlab.*runner"]
          initialDelaySeconds: 10
          timeoutSeconds: 1
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        ports:
        - name: "metrics"
          containerPort: 9252
        volumeMounts:
        - name: projected-secrets
          mountPath: /secrets
        - name: etc-gitlab-runner
          mountPath: /home/gitlab-runner/.gitlab-runner
        - name: configmaps
          mountPath: /configmaps
        resources:
          {}
      volumes:
      - name: runner-secrets
        emptyDir:
          medium: "Memory"
      - name: etc-gitlab-runner
        emptyDir:
          medium: "Memory"
      - name: projected-secrets
        projected:
          sources:
            - secret:
                name: "naren-minio-secret"
            - secret:
                name: "naren-gitlab-runner-secret"
                items:
                  - key: runner-registration-token
                    path: runner-registration-token
                  - key: runner-token
                    path: runner-token
      - name: configmaps
        configMap:
          name: naren-gitlab-runner
---
# Source: my-gitlab/charts/gitlab/charts/gitlab/charts/gitlab-exporter/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: naren-gitlab-exporter
  namespace: naren-gitlab
  labels:
    app: gitlab-exporter
    chart: gitlab-exporter-6.1.2
    release: naren
    heritage: Helm
    
  annotations:
    
spec:
  replicas: 1
  selector:
    matchLabels:
      app: gitlab-exporter
      release: naren
      
  template:
    metadata:
      labels:
        app: gitlab-exporter
        chart: gitlab-exporter-6.1.2
        release: naren
        heritage: Helm
        
        
      annotations:
        checksum/config: 5172abfcef606b7113b9d29e1b9bbdd5ec7bbc3c0908dd7385686fe112cd55b0
        gitlab.com/prometheus_scrape: "true"
        gitlab.com/prometheus_port: "9168"
        gitlab.com/prometheus_path: /metrics
        prometheus.io/scrape: "true"
        prometheus.io/port: "9168"
        prometheus.io/path: /metrics

    spec:
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchLabels:
                  app: gitlab-exporter
                  release: naren
                  
      automountServiceAccountToken: false
      initContainers:
        
        - name: certificates
          image: "registry.gitlab.com/gitlab-org/build/cng/alpine-certificates:20191127-r2@sha256:367d437d024d7647432d67fb2442e3e5723af5930bad77d3535f4f8f4f8630d9"  
          env:
          
          - name: MALLOC_CONF
            value: "dirty_decay_ms:0,muzzy_decay_ms:0"
          - name: RUBY_GC_HEAP_FREE_SLOTS_MAX_RATIO
            value: "0.111"
          - name: RUBY_GC_HEAP_FREE_SLOTS_MIN_RATIO
            value: "0.055"
          - name: RUBY_GC_HEAP_INIT_SLOTS
            value: "80000"
          
          volumeMounts:
          - name: etc-ssl-certs
            mountPath: /etc/ssl/certs
            readOnly: false
          - name: custom-ca-certificates
            mountPath: /usr/local/share/ca-certificates
            readOnly: true
          resources:
            requests:
              cpu: 50m
        - name: configure
          command: ['sh', '/config/configure']
          image: "registry.gitlab.com/gitlab-org/cloud-native/mirror/images/busybox:latest"          
          env:
          
          - name: MALLOC_CONF
            value: "dirty_decay_ms:0,muzzy_decay_ms:0"
          - name: RUBY_GC_HEAP_FREE_SLOTS_MAX_RATIO
            value: "0.111"
          - name: RUBY_GC_HEAP_FREE_SLOTS_MIN_RATIO
            value: "0.055"
          - name: RUBY_GC_HEAP_INIT_SLOTS
            value: "80000"
          
          volumeMounts:
          
          
          - name: gitlab-exporter-config
            mountPath: /config
            readOnly: true
          - name: init-gitlab-exporter-secrets
            mountPath: /init-config
            readOnly: true
          - name: gitlab-exporter-secrets
            mountPath: /init-secrets
            readOnly: false
          resources:
            requests:
              cpu: 50m      
      containers:
        
        - name: gitlab-exporter
          image: "registry.gitlab.com/gitlab-org/build/cng/gitlab-exporter:11.16.0"          
          env:
            - name: CONFIG_TEMPLATE_DIRECTORY
              value: '/var/opt/gitlab-exporter/templates'
            - name: CONFIG_DIRECTORY
              value: '/etc/gitlab-exporter'
            
            - name: MALLOC_CONF
              value: "dirty_decay_ms:0,muzzy_decay_ms:0"
            - name: RUBY_GC_HEAP_FREE_SLOTS_MAX_RATIO
              value: "0.111"
            - name: RUBY_GC_HEAP_FREE_SLOTS_MIN_RATIO
              value: "0.055"
            - name: RUBY_GC_HEAP_INIT_SLOTS
              value: "80000"
            
          ports:
          - containerPort: 9168
            name: http-metrics
          volumeMounts:
            - name: gitlab-exporter-config
              mountPath: /var/opt/gitlab-exporter/templates/gitlab-exporter.yml.erb
              subPath: gitlab-exporter.yml.erb
            - name: gitlab-exporter-secrets
              mountPath: '/etc/gitlab'
              readOnly: true
            
            - name: etc-ssl-certs
              mountPath: /etc/ssl/certs/
              readOnly: true
          livenessProbe:
            exec:
              command:
                - pgrep
                - -f
                - gitlab-exporter
          readinessProbe:
            exec:
              command:
                - pgrep
                - -f
                - gitlab-exporter
          lifecycle:
            preStop:
              exec:
                command: ["/bin/bash", "-c", "pkill -f 'gitlab-exporter'"]
          resources:
            requests:
              cpu: 75m
              memory: 100M
      volumes:
      
      
      - name: gitlab-exporter-config
        configMap:
          name: naren-gitlab-exporter
      - name: init-gitlab-exporter-secrets
        projected:
          defaultMode: 0400
          sources:
          - secret:
              name: "naren-postgresql-password"
              items:
                - key: "postgresql-password"
                  path: postgres/psql-password-main
          
          - secret:
              name: "naren-redis-secret"
              items:
                - key: "secret"
                  path: redis/redis-password
      - name: gitlab-exporter-secrets
        emptyDir:
          medium: "Memory"
      
      - name: etc-ssl-certs
        emptyDir:
          medium: "Memory"
      - name: custom-ca-certificates
        projected:
          defaultMode: 0440
          sources:
          - secret:
              name: naren-wildcard-tls-ca
---
# Source: my-gitlab/charts/gitlab/charts/gitlab/charts/gitlab-shell/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: naren-gitlab-shell
  namespace: naren-gitlab
  labels:
    app: gitlab-shell
    chart: gitlab-shell-6.1.2
    release: naren
    heritage: Helm
    
  annotations:
    
spec:
  selector:
    matchLabels:
      app: gitlab-shell
      release: naren
      
  template:
    metadata:
      labels:
        app: gitlab-shell
        chart: gitlab-shell-6.1.2
        release: naren
        heritage: Helm
        
        
      annotations:
        checksum/config: 5d1f7630a7bcfdcbe404d4982bd14f95b359867798d7ac1ae00a156b5834fd40
        checksum/config-sshd: 4679eee061b3df619a0a3450e35220edc929cf070070700d414d0e0993b81562
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    spec:
      initContainers:
        
        - name: certificates
          image: "registry.gitlab.com/gitlab-org/build/cng/alpine-certificates:20191127-r2@sha256:367d437d024d7647432d67fb2442e3e5723af5930bad77d3535f4f8f4f8630d9"  
          env:
          
          
          volumeMounts:
          - name: etc-ssl-certs
            mountPath: /etc/ssl/certs
            readOnly: false
          - name: custom-ca-certificates
            mountPath: /usr/local/share/ca-certificates
            readOnly: true
          resources:
            requests:
              cpu: 50m
        - name: configure
          command: ['sh', '/config/configure']
          image: "registry.gitlab.com/gitlab-org/cloud-native/mirror/images/busybox:latest"          
          env:
          
          
          volumeMounts:
          
          - name: shell-config
            mountPath: /config
            readOnly: true
          - name: shell-init-secrets
            mountPath: /init-config
            readOnly: true
          - name: shell-secrets
            mountPath: /init-secrets
            readOnly: false
          resources:
            requests:
              cpu: 50m
      securityContext:
        runAsUser: 1000
        fsGroup: 1000      
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchLabels:
                  app: gitlab-shell
                  release: naren
                  
      automountServiceAccountToken: false
      containers:
        
        - name: gitlab-shell
          image: "registry.gitlab.com/gitlab-org/build/cng/gitlab-shell:v14.7.4"          
          ports:
            - containerPort: 2222
              name: ssh
          env:
            - name: GITALY_FEATURE_DEFAULT_ON
              value: "1"
            - name: CONFIG_TEMPLATE_DIRECTORY
              value: '/etc/gitlab-shell'
            - name: CONFIG_DIRECTORY
              value: '/srv/gitlab-shell'
            - name: KEYS_DIRECTORY
              value: '/etc/gitlab-secrets/ssh'
            - name: SSH_DAEMON
              value: "openssh"
            
            
          volumeMounts:
            - name: shell-config
              mountPath: '/etc/gitlab-shell'
            - name: shell-secrets
              mountPath: '/etc/gitlab-secrets'
              readOnly: true
            - name: sshd-config
              mountPath: /etc/ssh/sshd_config
              subPath: sshd_config
              readOnly: true
            
            - name: etc-ssl-certs
              mountPath: /etc/ssl/certs/
              readOnly: true
          livenessProbe:
            exec:
              command:
              - /scripts/healthcheck
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            tcpSocket:
              port: 2222
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 2
          resources:
            requests:
              cpu: 0
              memory: 6M
      terminationGracePeriodSeconds: 30
      volumes:
      
      - name: shell-config
        configMap:
          name: naren-gitlab-shell
      - name: sshd-config
        configMap:
          name: naren-gitlab-shell-sshd
      - name: shell-init-secrets
        projected:
          defaultMode: 0440
          sources:
            - secret:
                name: "naren-gitlab-shell-host-keys"
            - secret:
                name: "naren-gitlab-shell-secret"
                items:
                  - key: "secret"
                    path: shell/.gitlab_shell_secret
      # Actual config dirs that will be used in the container
      - name: shell-secrets
        emptyDir:
          medium: "Memory"
      
      - name: etc-ssl-certs
        emptyDir:
          medium: "Memory"
      - name: custom-ca-certificates
        projected:
          defaultMode: 0440
          sources:
          - secret:
              name: naren-wildcard-tls-ca
---
# Source: my-gitlab/charts/gitlab/charts/gitlab/charts/kas/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: naren-kas
  namespace: naren-gitlab
  labels:
    app: kas
    chart: kas-6.1.2
    release: naren
    heritage: Helm
    
  annotations:
    
spec:
  selector:
    matchLabels:
      app: kas
      release: naren
      
  template:
    metadata:
      labels:
        app: kas
        chart: kas-6.1.2
        release: naren
        heritage: Helm
        
        
      annotations:
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
        gitlab.com/prometheus_scrape: "true"
        gitlab.com/prometheus_port: "8151"
        gitlab.com/prometheus_path: /metrics
        prometheus.io/scrape: "true"
        prometheus.io/port: "8151"
        prometheus.io/path: /metrics
    spec:
      
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchLabels:
                  app: kas
                  release: naren
                  
      securityContext:
        runAsUser: 65532
        runAsGroup: 65532
        fsGroup: 65532      
      initContainers:
        - name: certificates
          image: "registry.gitlab.com/gitlab-org/build/cng/alpine-certificates:20191127-r2@sha256:367d437d024d7647432d67fb2442e3e5723af5930bad77d3535f4f8f4f8630d9"  
          env:
          
          
          volumeMounts:
          - name: etc-ssl-certs
            mountPath: /etc/ssl/certs
            readOnly: false
          - name: custom-ca-certificates
            mountPath: /usr/local/share/ca-certificates
            readOnly: true
          resources:
            requests:
              cpu: 50m
      containers:
        
        - name: kas
          image: "registry.gitlab.com/gitlab-org/build/cng/gitlab-kas:v15.1.0"          
          args:
            - "--configuration-file=/etc/kas/config.yaml"
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: OWN_PRIVATE_API_URL
              value: "grpc://$(POD_IP):8155"
          ports:
            - containerPort: 8150
              name: kas
            - containerPort: 8154
              name: kas-k8s-api
            - containerPort: 8155
              name: kas-private-api
            - containerPort: 8151
              name: http-metrics
          readinessProbe:
            tcpSocket:
              port: 8150
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            tcpSocket:
              port: 8150
            initialDelaySeconds: 15
            periodSeconds: 20
          resources:
            requests:
              cpu: 100m
              memory: 100M
          volumeMounts:
            - name: init-etc-kas
              mountPath: /etc/kas
              readOnly: true
            
            - name: etc-ssl-certs
              mountPath: /etc/ssl/certs/
              readOnly: true
      volumes:
      
      
      - name: etc-ssl-certs
        emptyDir:
          medium: "Memory"
      - name: custom-ca-certificates
        projected:
          defaultMode: 0440
          sources:
          - secret:
              name: naren-wildcard-tls-ca
      - name: init-etc-kas
        projected:
          defaultMode: 0440
          sources:
            - configMap:
                name: naren-kas
            - secret:
                name: "naren-gitlab-kas-secret"
                items:
                  - key: "kas_shared_secret"
                    path: .gitlab_kas_secret
            - secret:
                name: "naren-kas-private-api"
                items:
                  - key: "kas_private_api_secret"
                    path: .gitlab_kas_private_api_secret
            
            
            - secret:
                name: "naren-redis-secret"
                items:
                  - key: "secret"
                    path: redis/redis-password
---
# Source: my-gitlab/charts/gitlab/charts/gitlab/charts/sidekiq/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: naren-sidekiq-all-in-1-v2
  namespace: naren-gitlab
  labels:
    app: sidekiq
    chart: sidekiq-6.1.2
    release: naren
    heritage: Helm
    
    queue-pod-name: all-in-1
  annotations:
    
spec:
  selector:
    matchLabels:
      app: sidekiq
      release: naren
      
      queue-pod-name: all-in-1
  template:
    metadata:
      labels:
        app: sidekiq
        chart: sidekiq-6.1.2
        release: naren
        heritage: Helm
        
        
        queue-pod-name: all-in-1
      annotations:
        checksum/configmap: b5d9a4c74298251ec2020e01a8fc1508fac1eb682e35f8d6459a90d6cece772d
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
        gitlab.com/prometheus_scrape: "true"
        gitlab.com/prometheus_port: "3807"
        gitlab.com/prometheus_path: /metrics
        prometheus.io/scrape: "true"
        prometheus.io/port: "3807"
        prometheus.io/path: /metrics
    spec:
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchLabels:
                  app: sidekiq
                  release: naren
                  
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 30
      initContainers:
        
        - name: certificates
          image: "registry.gitlab.com/gitlab-org/build/cng/alpine-certificates:20191127-r2@sha256:367d437d024d7647432d67fb2442e3e5723af5930bad77d3535f4f8f4f8630d9"  
          env:
          
          
          volumeMounts:
          - name: etc-ssl-certs
            mountPath: /etc/ssl/certs
            readOnly: false
          - name: custom-ca-certificates
            mountPath: /usr/local/share/ca-certificates
            readOnly: true
          resources:
            requests:
              cpu: 50m
        - name: configure
          command: ['sh', '/config/configure']
          image: "registry.gitlab.com/gitlab-org/cloud-native/mirror/images/busybox:latest"          
          env:
          
          
          volumeMounts:
          
          
          
          
          - name: sidekiq-config
            mountPath: /config
            readOnly: true
          - name: init-sidekiq-secrets
            mountPath: /init-config
            readOnly: true
          - name: sidekiq-secrets
            mountPath: /init-secrets
            readOnly: false
          resources:
            requests:
              cpu: 50m
        - name: dependencies
          image: "registry.gitlab.com/gitlab-org/build/cng/gitlab-sidekiq-ee:v15.1.2"          
          args:
            - /scripts/wait-for-deps
          env:
            - name: GITALY_FEATURE_DEFAULT_ON
              value: "1"
            - name: CONFIG_TEMPLATE_DIRECTORY
              value: '/var/opt/gitlab/templates'
            - name: CONFIG_DIRECTORY
              value: '/srv/gitlab/config'
            - name: SIDEKIQ_CONCURRENCY
              value: "25"
            - name: SIDEKIQ_TIMEOUT
              value: "25"
            - name: ENABLE_BOOTSNAP
              value: "1"
            
            
          volumeMounts:
          
          
          - name: etc-ssl-certs
            mountPath: /etc/ssl/certs/
            readOnly: true
          - name: sidekiq-config
            mountPath: '/var/opt/gitlab/templates'
            readOnly: true
          - name: sidekiq-secrets
            mountPath: '/etc/gitlab'
            readOnly: true
          - name: sidekiq-secrets
            mountPath: /srv/gitlab/config/secrets.yml
            subPath: rails-secrets/secrets.yml
            readOnly: true
          resources:
            requests:
              cpu: 50m      
      containers:
        
        - name: sidekiq
          image: "registry.gitlab.com/gitlab-org/build/cng/gitlab-sidekiq-ee:v15.1.2"          
          env:
            - name: prometheus_multiproc_dir
              value: /metrics
            - name: GITALY_FEATURE_DEFAULT_ON
              value: "1"
            - name: CONFIG_TEMPLATE_DIRECTORY
              value: '/var/opt/gitlab/templates'
            - name: CONFIG_DIRECTORY
              value: '/srv/gitlab/config'
            - name: SIDEKIQ_QUEUE_SELECTOR
              value: ""
            - name: SIDEKIQ_CONCURRENCY
              value: "25"
            - name: SIDEKIQ_TIMEOUT
              value: "25"
            - name: SIDEKIQ_QUEUES
              value: 
            - name: SIDEKIQ_NEGATE_QUEUES
              value: 
            - name: SIDEKIQ_DAEMON_MEMORY_KILLER
              value: "1"
            - name: SIDEKIQ_MEMORY_KILLER_CHECK_INTERVAL
              value: "3"
            - name: SIDEKIQ_MEMORY_KILLER_MAX_RSS
              value: "2000000"
            - name: SIDEKIQ_MEMORY_KILLER_GRACE_TIME
              value: "900"
            - name: SIDEKIQ_MEMORY_KILLER_SHUTDOWN_WAIT
              value: "30"
            - name: ENABLE_BOOTSNAP
              value: "1"
            
            
          ports:
          - containerPort: 3807
            name: http-metrics
          volumeMounts:
          
          
          - name: sidekiq-metrics
            mountPath: '/metrics'
          - name: sidekiq-config
            mountPath: '/var/opt/gitlab/templates'
            readOnly: true
          - name: sidekiq-secrets
            mountPath: '/etc/gitlab'
            readOnly: true
          - name: sidekiq-secrets
            mountPath: /srv/gitlab/config/secrets.yml
            subPath: rails-secrets/secrets.yml
          - name: sidekiq-config
            mountPath: '/srv/gitlab/config/initializers/smtp_settings.rb'
            subPath: smtp_settings.rb
          - name: sidekiq-config
            mountPath: '/srv/gitlab/INSTALLATION_TYPE'
            subPath: installation_type
          - name: etc-ssl-certs
            mountPath: /etc/ssl/certs/
            readOnly: true
          livenessProbe:
            httpGet:
              path: /liveness
              port: 3808
            initialDelaySeconds: 20
            periodSeconds: 60
            timeoutSeconds: 30
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /readiness
              port: 3808
            initialDelaySeconds: 0
            periodSeconds: 10
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 3
          lifecycle:
            preStop:
              exec:
                command: ["/bin/bash", "-c", "pkill -f 'sidekiq'"]
          resources:
            requests:
              cpu: 900m
              memory: 2G
      volumes:
      
      
      
      
      - name: sidekiq-metrics
        emptyDir:
          medium: "Memory"
      - name: sidekiq-config
        projected:
          sources:
            - configMap:
                name: naren-sidekiq
      - name: init-sidekiq-secrets
        projected:
          defaultMode: 0400
          sources:
          - secret:
              name: "naren-rails-secret"
              items:
                - key: secrets.yml
                  path: rails-secrets/secrets.yml
          - secret:
              name: "naren-gitaly-secret"
              items:
                - key: "token"
                  path: gitaly/gitaly_token
          
          
          - secret:
              name: "naren-redis-secret"
              items:
                - key: "secret"
                  path: redis/redis-password
          - secret:
              name: "naren-postgresql-password"
              items:
                - key: "postgresql-password"
                  path: postgres/psql-password-main
          - secret:
              name: "naren-registry-secret"
              items:
                - key: registry-auth.key
                  path: registry/gitlab-registry.key
          - secret:
              name: "naren-registry-notification"
              items:
                - key: "secret"
                  path: registry/notificationSecret
          
          # mount secret for kas
          - secret:
              name: "naren-gitlab-kas-secret"
              items:
                - key: "kas_shared_secret"
                  path: kas/.gitlab_kas_secret
          # mount secret for minio
          - secret:
              name: "naren-minio-secret"
              items:
                - key: accesskey
                  path: minio/accesskey
                - key: secretkey
                  path: minio/secretkey
          # mount secret for object_store
          # mount secret for lfs
          # mount secret for artifacts
          # mount secret for uploads
          # mount secret for packages
          # mount secret for external_diffs
          # mount secret for terraform_state
          # mount secret for ci_secure_files
          # mount secret for dependency_proxy
          # mount secret for pages
          # mount secrets for LDAP
          
      - name: sidekiq-secrets
        emptyDir:
          medium: "Memory"
      
      - name: etc-ssl-certs
        emptyDir:
          medium: "Memory"
      - name: custom-ca-certificates
        projected:
          defaultMode: 0440
          sources:
          - secret:
              name: naren-wildcard-tls-ca
---
# Source: my-gitlab/charts/gitlab/charts/gitlab/charts/toolbox/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: naren-toolbox
  namespace: naren-gitlab
  labels:
    app: toolbox
    chart: toolbox-6.1.2
    release: naren
    heritage: Helm
    
  annotations:
    
spec:
  replicas: 1
  selector:
    matchLabels:
      app: toolbox
      release: naren
      
  strategy: 
    type: Recreate
  template:
    metadata:
      labels:
        app: toolbox
        chart: toolbox-6.1.2
        release: naren
        heritage: Helm
        
        
      annotations:
        checksum/config: 599601930f6dac61f441d46103d6571c38c400f6db99633d52e5f62294151ee4
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    spec:
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
      automountServiceAccountToken: false
      initContainers:
        
        - name: certificates
          image: "registry.gitlab.com/gitlab-org/build/cng/alpine-certificates:20191127-r2@sha256:367d437d024d7647432d67fb2442e3e5723af5930bad77d3535f4f8f4f8630d9"  
          env:
          
          
          volumeMounts:
          - name: etc-ssl-certs
            mountPath: /etc/ssl/certs
            readOnly: false
          - name: custom-ca-certificates
            mountPath: /usr/local/share/ca-certificates
            readOnly: true
          resources:
            requests:
              cpu: 50m
        - name: configure
          command: ['sh', '/config/configure']
          image: "registry.gitlab.com/gitlab-org/cloud-native/mirror/images/busybox:latest"          
          env:
          
          
          volumeMounts:
          
          
          
          - name: toolbox-config
            mountPath: /config
            readOnly: true
          - name: init-toolbox-secrets
            mountPath: /init-config
            readOnly: true
          - name: toolbox-secrets
            mountPath: /init-secrets
            readOnly: false
          resources:
            requests:
              cpu: 50m      
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchLabels:
                  app: gitaly
                  release: naren
      containers:
        
        - name: toolbox
          args:
            - /bin/bash
            - -c
            - cp -v -r -L /etc/gitlab/.s3cfg $HOME/.s3cfg && while sleep 3600; do :; done # alpine sleep has no infinity
          image: "registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ee:v15.1.2"          
          env:
            - name: ARTIFACTS_BUCKET_NAME
              value: gitlab-artifacts
            - name: REGISTRY_BUCKET_NAME
              value: registry
            - name: LFS_BUCKET_NAME
              value: git-lfs
            - name: UPLOADS_BUCKET_NAME
              value: gitlab-uploads
            - name: PACKAGES_BUCKET_NAME
              value: gitlab-packages
            - name: EXTERNAL_DIFFS_BUCKET_NAME
              value: gitlab-mr-diffs
            - name: TERRAFORM_STATE_BUCKET_NAME
              value: gitlab-terraform-state
            - name: CI_SECURE_FILES_BUCKET_NAME
              value: gitlab-ci-secure-files
            - name: BACKUP_BUCKET_NAME
              value: gitlab-backups
            - name: BACKUP_BACKEND
              value: s3
            - name: TMP_BUCKET_NAME
              value: tmp
            - name: PAGES_BUCKET_NAME
              value: gitlab-pages
            - name: GITALY_FEATURE_DEFAULT_ON
              value: "1"
            - name: ENABLE_BOOTSNAP
              value: "1"
            - name: CONFIG_TEMPLATE_DIRECTORY
              value: '/var/opt/gitlab/templates'
            - name: CONFIG_DIRECTORY
              value: '/srv/gitlab/config'
            
            
          volumeMounts:
            
            - name: toolbox-config
              mountPath: '/var/opt/gitlab/templates'
            - name: toolbox-config
              mountPath: '/srv/gitlab/config/initializers/smtp_settings.rb'
              subPath: smtp_settings.rb
            - name: toolbox-secrets
              mountPath: '/etc/gitlab'
              readOnly: true
            - name: toolbox-secrets
              mountPath: /srv/gitlab/config/secrets.yml
              subPath: rails-secrets/secrets.yml
            - name: toolbox-tmp
              mountPath: '/srv/gitlab/tmp'
              readOnly: false
            - name: etc-ssl-certs
              mountPath: /etc/ssl/certs/
              readOnly: true
          resources:
            requests:
              cpu: 50m
              memory: 350M
      volumes:
      
      
      
      - name: toolbox-config
        projected:
          sources:
            - configMap:
                name: naren-toolbox
      - name: toolbox-tmp
        emptyDir: {}
      - name: init-toolbox-secrets
        projected:
          defaultMode: 0400
          sources:
          - secret:
              name: "naren-rails-secret"
              items:
                - key: secrets.yml
                  path: rails-secrets/secrets.yml
          - secret:
              name: "naren-gitlab-shell-secret"
              items:
                - key: "secret"
                  path: shell/.gitlab_shell_secret
          - secret:
              name: "naren-gitaly-secret"
              items:
                - key: "token"
                  path: gitaly/gitaly_token
          
          
          - secret:
              name: "naren-redis-secret"
              items:
                - key: "secret"
                  path: redis/redis-password
          - secret:
              name: "naren-postgresql-password"
              items:
                - key: "postgresql-password"
                  path: postgres/psql-password-main
          - secret:
              name: "naren-registry-secret"
              items:
                - key: registry-auth.key
                  path: registry/gitlab-registry.key
          - secret:
              name: "naren-registry-notification"
              items:
                - key: "secret"
                  path: registry/notificationSecret
          
          # mount secret for kas
          - secret:
              name: "naren-gitlab-kas-secret"
              items:
                - key: "kas_shared_secret"
                  path: kas/.gitlab_kas_secret
          # mount secret for minio
          - secret:
              name: "naren-minio-secret"
              items:
                - key: accesskey
                  path: minio/accesskey
                - key: secretkey
                  path: minio/secretkey
          # mount secret for object_store
          # mount secret for artifacts
          # mount secret for lfs
          # mount secret for uploads
          # mount secret for packages
          # mount secret for external_diffs
          # mount secret for terraform_state
          # mount secret for ci_secure_files
          # mount secret for dependency_proxy
          # mount secret for pages
          # mount secrets for LDAP
          
      - name: toolbox-secrets
        emptyDir:
          medium: "Memory"
      
      - name: etc-ssl-certs
        emptyDir:
          medium: "Memory"
      - name: custom-ca-certificates
        projected:
          defaultMode: 0440
          sources:
          - secret:
              name: naren-wildcard-tls-ca
---
# Source: my-gitlab/charts/gitlab/charts/gitlab/charts/webservice/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: naren-webservice-default
  namespace: naren-gitlab
  labels:
    app: webservice
    chart: webservice-6.1.2
    release: naren
    heritage: Helm
    gitlab.com/webservice-name: default
    
  annotations:
    
spec:
  # Don't provide replicas when HPA are present
  # replicas: 2
  selector:
    matchLabels:
      app: webservice
      release: naren
      
      
      gitlab.com/webservice-name: default
  template:
    metadata:
      labels:
        app: webservice
        chart: webservice-6.1.2
        release: naren
        heritage: Helm
        gitlab.com/webservice-name: default
        
        
        
      annotations:
        checksum/config: 3ee55744368b19618b18c49142f96d365723c41016349d9d7144d3f9a94b2aa2
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
        gitlab.com/prometheus_scrape: "true"
        gitlab.com/prometheus_port: "8083"
        gitlab.com/prometheus_path: /metrics
        prometheus.io/scrape: "true"
        prometheus.io/port: "8083"
        prometheus.io/path: /metrics
    spec:
      
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchLabels:
                  app: webservice
                  release: naren
                  
                  gitlab.com/webservice-name: default
      automountServiceAccountToken: false
      initContainers:
        
        - name: certificates
          image: "registry.gitlab.com/gitlab-org/build/cng/alpine-certificates:20191127-r2@sha256:367d437d024d7647432d67fb2442e3e5723af5930bad77d3535f4f8f4f8630d9"  
          env:
          
          
          volumeMounts:
          - name: etc-ssl-certs
            mountPath: /etc/ssl/certs
            readOnly: false
          - name: custom-ca-certificates
            mountPath: /usr/local/share/ca-certificates
            readOnly: true
          resources:
            requests:
              cpu: 50m
        - name: configure
          command: ['sh']
          args: [ '-c', 'sh -x /config-webservice/configure ; sh -x /config-workhorse/configure ; mkdir -p -m 3770 /tmp/gitlab']
          image: "registry.gitlab.com/gitlab-org/cloud-native/mirror/images/busybox:latest"          
          env:
            
            
          volumeMounts:
          
          
          
          - name: webservice-config
            mountPath: /config-webservice
            readOnly: true
          - name: workhorse-config
            mountPath: /config-workhorse
            readOnly: true
          - name: init-webservice-secrets
            mountPath: /init-config
            readOnly: true
          - name: webservice-secrets
            mountPath: /init-secrets
            readOnly: false
          - name: workhorse-secrets
            mountPath: /init-secrets-workhorse
            readOnly: false
          - name: shared-tmp
            mountPath: /tmp
            readOnly: false
          resources:
            requests:
              cpu: 50m
        - name: dependencies
          image: registry.gitlab.com/gitlab-org/build/cng/gitlab-webservice-ee:v15.1.2          
          args:
            - /scripts/wait-for-deps
          env:
            - name: GITALY_FEATURE_DEFAULT_ON
              value: "1"
            - name: CONFIG_TEMPLATE_DIRECTORY
              value: '/var/opt/gitlab/templates'
            - name: CONFIG_DIRECTORY
              value: '/srv/gitlab/config'
            - name: WORKHORSE_ARCHIVE_CACHE_DISABLED
              value: "1"
            - name: ENABLE_BOOTSNAP
              value: "1"
            
            
          volumeMounts:
            
            - name: etc-ssl-certs
              mountPath: /etc/ssl/certs/
              readOnly: true
            - name: webservice-config
              mountPath: '/var/opt/gitlab/templates'
            - name: webservice-secrets
              mountPath: '/etc/gitlab'
              readOnly: true
            - name: webservice-secrets
              mountPath: /srv/gitlab/config/secrets.yml
              subPath: rails-secrets/secrets.yml
              readOnly: true
          resources:
            requests:
              cpu: 50m      
      containers:
        
        - name: webservice
          image: registry.gitlab.com/gitlab-org/build/cng/gitlab-webservice-ee:v15.1.2          
          ports:
            - containerPort: 8080
              name: http-webservice
            - containerPort: 8083
              name: http-metrics-ws
          env:
            - name: GITLAB_WEBSERVER
              value: puma
            - name: TMPDIR
              value: "/tmp/gitlab"
            - name: GITALY_FEATURE_DEFAULT_ON
              value: "1"
            - name: CONFIG_TEMPLATE_DIRECTORY
              value: '/var/opt/gitlab/templates'
            - name: CONFIG_DIRECTORY
              value: '/srv/gitlab/config'
            - name: prometheus_multiproc_dir
              value: /metrics
            - name: ENABLE_BOOTSNAP
              value: "1"
            - name: WORKER_PROCESSES
              value: "2"
            - name: WORKER_TIMEOUT
              value: "60"
            - name: INTERNAL_PORT
              value: "8080"
            - name: PUMA_THREADS_MIN
              value: "4"
            - name: PUMA_THREADS_MAX
              value: "4"
            - name: PUMA_WORKER_MAX_MEMORY
              value: ""
            - name: DISABLE_PUMA_WORKER_KILLER
              value: "true"
            - name: SHUTDOWN_BLACKOUT_SECONDS
              value: "10"
            
            - name: WORKHORSE_ARCHIVE_CACHE_DISABLED
              value: "true"
            
            
          volumeMounts:
            - name: webservice-metrics
              mountPath: '/metrics'
            - name: webservice-config
              mountPath: '/var/opt/gitlab/templates'
            - name: webservice-secrets
              mountPath: '/etc/gitlab'
              readOnly: true
            - name: webservice-secrets
              mountPath: /srv/gitlab/config/secrets.yml
              subPath: rails-secrets/secrets.yml
            - name: webservice-config
              mountPath: '/srv/gitlab/config/initializers/smtp_settings.rb'
              subPath: smtp_settings.rb
            - name: webservice-config
              mountPath: '/srv/gitlab/INSTALLATION_TYPE'
              subPath: installation_type
            - name: shared-upload-directory
              mountPath: /srv/gitlab/public/uploads/tmp
              readOnly: false
            - name: shared-tmp
              mountPath: '/tmp'
              readOnly: false
            - name: etc-ssl-certs
              mountPath: /etc/ssl/certs/
              readOnly: true
            
          livenessProbe:
            httpGet:
              path: /-/liveness
              port: 8080
            initialDelaySeconds: 20
            periodSeconds: 60
            timeoutSeconds: 30
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /-/readiness
              port: 8080
            initialDelaySeconds: 0
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 2
          lifecycle:
            preStop:
              exec:
                command: ["/bin/bash", "-c", "pkill -SIGINT -o ruby"]
          resources:
            requests:
              cpu: 300m
              memory: 2.5G
        - name: gitlab-workhorse
          image: "registry.gitlab.com/gitlab-org/build/cng/gitlab-workhorse-ee:v15.1.2"          
          ports:
            - containerPort: 8181
              name: http-workhorse
          env:
            - name: TMPDIR
              value: "/tmp/gitlab"
            - name: GITLAB_WORKHORSE_AUTH_BACKEND
              value: "http://localhost:8080"
            - name: GITLAB_WORKHORSE_EXTRA_ARGS
              value: ""
            - name: GITLAB_WORKHORSE_LISTEN_PORT
              value: "8181"
            - name: GITLAB_WORKHORSE_LOG_FORMAT
              value: "json"
            - name: CONFIG_TEMPLATE_DIRECTORY
              value: '/var/opt/gitlab/templates'
            - name: CONFIG_DIRECTORY
              value: '/srv/gitlab/config'
            
            
            
          volumeMounts:
            - name: workhorse-config
              mountPath: '/var/opt/gitlab/templates'
            - name: workhorse-secrets
              mountPath: '/etc/gitlab'
              readOnly: true
            - name: shared-upload-directory
              mountPath: /srv/gitlab/public/uploads/tmp
              readOnly: false
            - name: shared-tmp
              mountPath: '/tmp'
              readOnly: false
            - name: etc-ssl-certs
              mountPath: /etc/ssl/certs/
              readOnly: true
            
          livenessProbe:
            exec:
              command:
              - /scripts/healthcheck
            initialDelaySeconds: 20
            periodSeconds: 60
            timeoutSeconds: 30
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
              - /scripts/healthcheck
            initialDelaySeconds: 0
            periodSeconds: 10
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 3
          resources:
            requests:
              cpu: 100m
              memory: 100M
      volumes:
      
      
      
      - name: shared-tmp
        emptyDir: {}
      - name: webservice-metrics
        emptyDir:
          medium: "Memory"
      - name: webservice-config
        configMap:
          name: naren-webservice
      - name: workhorse-config
        configMap:
            name: naren-workhorse-default
      - name: init-webservice-secrets
        projected:
          defaultMode: 0400
          sources:
          - secret:
              name: "naren-rails-secret"
              items:
                - key: secrets.yml
                  path: rails-secrets/secrets.yml
          - secret:
              name: "naren-gitlab-shell-secret"
              items:
                - key: "secret"
                  path: shell/.gitlab_shell_secret
          # mount secrets for incomingEmail
          # mount secrets for serviceDeskEmail
          - secret:
              name: "naren-gitaly-secret"
              items:
                - key: "token"
                  path: gitaly/gitaly_token
          
          
          - secret:
              name: "naren-redis-secret"
              items:
                - key: "secret"
                  path: redis/redis-password
          - secret:
              name: "naren-postgresql-password"
              items:
                - key: "postgresql-password"
                  path: postgres/psql-password-main
          - secret:
              name: "naren-registry-secret"
              items:
                - key: registry-auth.key
                  path: registry/gitlab-registry.key
          - secret:
              name: "naren-registry-notification"
              items:
                - key: "secret"
                  path: registry/notificationSecret
          - secret:
              name: "naren-gitlab-workhorse-secret"
              items:
                - key: "shared_secret"
                  path: gitlab-workhorse/secret
          
          # mount secret for kas
          - secret:
              name: "naren-gitlab-kas-secret"
              items:
                - key: "kas_shared_secret"
                  path: kas/.gitlab_kas_secret
          # mount secret for minio
          - secret:
              name: "naren-minio-secret"
              items:
                - key: accesskey
                  path: minio/accesskey
                - key: secretkey
                  path: minio/secretkey
          # mount secret for object_store
          # mount secret for artifacts
          # mount secret for lfs
          # mount secret for uploads
          # mount secret for packages
          # mount secret for external_diffs
          # mount secret for terraform_state
          # mount secret for ci_secure_files
          # mount secret for dependency_proxy
          # mount secret for pages
          # mount secrets for LDAP
          
      - name: webservice-secrets
        emptyDir:
          medium: "Memory"
      - name: workhorse-secrets
        emptyDir:
          medium: "Memory"
      - name: shared-upload-directory
        emptyDir: {}
      
      - name: etc-ssl-certs
        emptyDir:
          medium: "Memory"
      - name: custom-ca-certificates
        projected:
          defaultMode: 0440
          sources:
          - secret:
              name: naren-wildcard-tls-ca
---
# Source: my-gitlab/charts/gitlab/charts/minio/templates/minio_deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: naren-minio
  namespace: naren-gitlab
  labels:
    app: minio
    chart: minio-0.4.3
    release: naren
    heritage: Helm
    
  annotations:
    
spec:
  selector:
    matchLabels:
      app: minio
      release: "naren"
      component: app
  strategy: 
    type: Recreate
  template:
    metadata:
      name: naren-minio
      labels:
        component: app
        app: minio
        chart: minio-0.4.3
        release: naren
        heritage: Helm
        
        
      annotations:
    spec:
      automountServiceAccountToken: false
      
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
      volumes:
        - name: podinfo
          downwardAPI:
            items:
              - path: "labels"
                fieldRef:
                  fieldPath: metadata.labels
        - name: export
          persistentVolumeClaim:
            claimName: naren-minio
        - name: minio-configuration
          projected:
            sources:
            - configMap:
                name: naren-minio-config-cm
            - secret:
                name: "naren-minio-secret"
        - name: minio-server-config
          emptyDir:
            medium: "Memory"
      initContainers:
        - name: configure
          image: "registry.gitlab.com/gitlab-org/cloud-native/mirror/images/busybox:latest"          
          command: ["sh", "/config/configure"]
          volumeMounts:
            - name: minio-configuration
              mountPath: /config
            - name: minio-server-config
              mountPath: /minio
          resources:
            requests:
              cpu: 50m      
      containers:
        - name: minio
          image: minio/minio:RELEASE.2017-12-28T01-21-00Z          
          args: ["-C", "/tmp/.minio", "--quiet", "server", "/export"]
          volumeMounts:
            - name: export
              mountPath: /export
            - name: minio-server-config
              # this path altered from upstream, for use with `securityContext`/UID 1000
              mountPath: "/tmp/.minio"
            - name: podinfo
              mountPath: /podinfo
              readOnly: false
          ports:
            - name: service
              containerPort: 9000
          livenessProbe:
            tcpSocket:
              port: 9000
            timeoutSeconds: 1
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
---
# Source: my-gitlab/charts/gitlab/charts/registry/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: naren-registry
  namespace: naren-gitlab
  labels:
    app: registry
    chart: registry-0.7.0
    release: naren
    heritage: Helm
    
  annotations:
    
spec:
  # Don't provide replicas when HPA are present
  # replicas: 2
  selector:
    matchLabels:
      app: registry
      release: naren
  template:
    metadata:
      labels:
        app: registry
        chart: registry-0.7.0
        release: naren
        heritage: Helm
        
        
      annotations:
        checksum/configmap: 12d3416a6db9f7f2bafd1dc96a1620bdd3f11685d0d097a2d85d623988f3b028
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    spec:
      
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchLabels:
                  app: registry
                  release: naren
      automountServiceAccountToken: false
      initContainers:
        - name: certificates
          image: "registry.gitlab.com/gitlab-org/build/cng/alpine-certificates:20191127-r2@sha256:367d437d024d7647432d67fb2442e3e5723af5930bad77d3535f4f8f4f8630d9"  
          env:
          
          
          volumeMounts:
          - name: etc-ssl-certs
            mountPath: /etc/ssl/certs
            readOnly: false
          - name: custom-ca-certificates
            mountPath: /usr/local/share/ca-certificates
            readOnly: true
          resources:
            requests:
              cpu: 50m
        - name: configure
          image: "registry.gitlab.com/gitlab-org/cloud-native/mirror/images/busybox:latest"          
          command: ["sh", "/config/configure"]
          volumeMounts:
            - name: registry-secrets
              mountPath: /config
            - name: registry-server-config
              mountPath: /registry
          resources:
            requests:
              cpu: 50m
          env:
          
                
      containers:
        - name: registry
          image: "registry.gitlab.com/gitlab-org/build/cng/gitlab-container-registry:v3.48.0-gitlab"          
          env:
          
          
          volumeMounts:
          - name: registry-server-config
            mountPath: /etc/docker/registry/
            readOnly: true
          - name: etc-ssl-certs
            mountPath: /etc/ssl/certs/
            readOnly: true
          ports:
            - containerPort: 5000
              name: http
            - containerPort: 5001
              name: debug
          livenessProbe:
            httpGet:
              path: /debug/health
              port: debug
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /debug/health
              port: debug
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 3
          resources:
            requests:
              cpu: 50m
              memory: 32Mi
          lifecycle:
            preStop:
              exec:
                command: ["/bin/bash", "-c", "sleep 5"]
      terminationGracePeriodSeconds: 30
      volumes:
      - name: registry-server-config
        emptyDir:
          medium: "Memory"
      - name: registry-secrets
        projected:
          sources:
          - configMap:
              name: naren-registry
          - secret:
              name: "naren-registry-secret"
              items:
                  - key: registry-auth.crt
                    path: certificate.crt
          - secret:
              name: "naren-registry-httpsecret"
              items:
                - key: "secret"
                  path: httpSecret
          - secret:
              name: "naren-minio-secret"
          
      
      - name: etc-ssl-certs
        emptyDir:
          medium: "Memory"
      - name: custom-ca-certificates
        projected:
          defaultMode: 0440
          sources:
          - secret:
              name: naren-wildcard-tls-ca
---
# Source: my-gitlab/charts/gitlab/charts/gitlab/charts/gitlab-shell/templates/hpa.yaml
apiVersion: autoscaling/v2beta1
kind: HorizontalPodAutoscaler
metadata:
  name: naren-gitlab-shell
  namespace: naren-gitlab
  labels:
    app: gitlab-shell
    chart: gitlab-shell-6.1.2
    release: naren
    heritage: Helm
    
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: naren-gitlab-shell
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      targetAverageValue: 100m
---
# Source: my-gitlab/charts/gitlab/charts/gitlab/charts/kas/templates/hpa.yaml
apiVersion: autoscaling/v2beta1
kind: HorizontalPodAutoscaler
metadata:
  name: naren-kas
  namespace: naren-gitlab
  labels:
    app: kas
    chart: kas-6.1.2
    release: naren
    heritage: Helm
    
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: naren-kas
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      targetAverageValue: 100m
---
# Source: my-gitlab/charts/gitlab/charts/gitlab/charts/sidekiq/templates/hpa.yaml
apiVersion: autoscaling/v2beta1
kind: HorizontalPodAutoscaler
metadata:
  name: naren-sidekiq-all-in-1-v2
  namespace: naren-gitlab
  labels:
    app: sidekiq
    chart: sidekiq-6.1.2
    release: naren
    heritage: Helm
    
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: naren-sidekiq-all-in-1-v2
  minReplicas: 1
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      targetAverageValue: 350m
---
# Source: my-gitlab/charts/gitlab/charts/gitlab/charts/webservice/templates/hpa.yaml
apiVersion: autoscaling/v2beta1
kind: HorizontalPodAutoscaler
metadata:
  name: naren-webservice-default
  namespace: naren-gitlab
  labels:
    app: webservice
    chart: webservice-6.1.2
    release: naren
    heritage: Helm
    gitlab.com/webservice-name: default
    
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: naren-webservice-default
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      targetAverageValue: 1
---
# Source: my-gitlab/charts/gitlab/charts/registry/templates/hpa.yaml
apiVersion: autoscaling/v2beta1
kind: HorizontalPodAutoscaler
metadata:
  name: naren-registry
  namespace: naren-gitlab
  labels:
    app: registry
    chart: registry-0.7.0
    release: naren
    heritage: Helm
    
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: naren-registry
  minReplicas: 2
  maxReplicas: 10
  metrics:
    - type: Resource
      resource:
        name: cpu
        targetAverageUtilization: 75
---
# Source: my-gitlab/charts/gitlab/charts/gitlab/charts/gitaly/templates/statefulset.yml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: naren-gitaly
  namespace: naren-gitlab
  labels:
    app: gitaly
    chart: gitaly-6.1.2
    release: naren
    heritage: Helm
    
spec:
  selector:
    matchLabels:
      app: gitaly
      release: naren
      
  serviceName: naren-gitaly
  replicas: 1
  podManagementPolicy: Parallel
  template:
    metadata:
      labels:
        app: gitaly
        chart: gitaly-6.1.2
        release: naren
        heritage: Helm
        
        
      annotations:
        checksum/config: 71cf6981e3d0c8e1eacbdcc8a9fe381bcf0f4f7e0bf309bc9168eec1da5a8098
        gitlab.com/prometheus_scrape: "true"
        gitlab.com/prometheus_port: "9236"
        gitlab.com/prometheus_path: /metrics
        prometheus.io/scrape: "true"
        prometheus.io/port: "9236"
        prometheus.io/path: /metrics
    spec:
      terminationGracePeriodSeconds: 30
      initContainers:
        
        - name: certificates
          image: "registry.gitlab.com/gitlab-org/build/cng/alpine-certificates:20191127-r2@sha256:367d437d024d7647432d67fb2442e3e5723af5930bad77d3535f4f8f4f8630d9"  
          env:
          
          
          volumeMounts:
          - name: etc-ssl-certs
            mountPath: /etc/ssl/certs
            readOnly: false
          - name: custom-ca-certificates
            mountPath: /usr/local/share/ca-certificates
            readOnly: true
          resources:
            requests:
              cpu: 50m
        - name: configure
          command: ['sh', '/config/configure']
          image: "registry.gitlab.com/gitlab-org/cloud-native/mirror/images/busybox:latest"          
          env:
          
          
          volumeMounts:
          
          - name: gitaly-config
            mountPath: /config
            readOnly: true
          - name: init-gitaly-secrets
            mountPath: /init-config
            readOnly: true
          - name: gitaly-secrets
            mountPath: /init-secrets
            readOnly: false
          resources:
            requests:
              cpu: 50m
      securityContext:
        runAsUser: 1000
        fsGroup: 1000      
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchLabels:
                  app: gitaly
                  release: naren
                  
      automountServiceAccountToken: false
      containers:
        
        - name: gitaly
          image: "registry.gitlab.com/gitlab-org/build/cng/gitaly:v15.1.2"          
          ports:
            - containerPort: 8075
              name: grpc-gitaly
            - containerPort: 9236
              name: http-metrics
          env:
            - name: CONFIG_TEMPLATE_DIRECTORY
              value: '/etc/gitaly/templates'
            - name: CONFIG_DIRECTORY
              value: '/etc/gitaly'
            - name: GITALY_CONFIG_FILE
              value: '/etc/gitaly/config.toml'
            - name: SSL_CERT_DIR
              value: '/etc/ssl/certs'
            
            
            
          volumeMounts:
            
            - name: etc-ssl-certs
              mountPath: /etc/ssl/certs/
              readOnly: true
            - name: gitaly-config
              mountPath: '/etc/gitaly/templates'
            - name: gitaly-secrets
              mountPath: '/etc/gitlab-secrets'
              readOnly: true
            - name: repo-data
              mountPath: '/home/git/repositories'
          livenessProbe:
            exec:
              command:
              - /scripts/healthcheck
            initialDelaySeconds: 30
            timeoutSeconds: 3
            periodSeconds: 10
          readinessProbe:
            exec:
              command:
              - /scripts/healthcheck
            initialDelaySeconds: 10
            timeoutSeconds: 3
            periodSeconds: 10
          resources:
            requests:
              cpu: 100m
              memory: 200Mi
      volumes:
      
      - name: gitaly-config
        configMap:
          name: naren-gitaly
      - name: gitaly-secrets
        emptyDir:
          medium: "Memory"
      - name: init-gitaly-secrets
        projected:
          defaultMode: 0440
          sources:
          - secret:
              name: "naren-gitaly-secret"
              items:
                - key: "token"
                  path: "gitaly_token"
          - secret:
              name: "naren-gitlab-shell-secret"
              items:
                - key: "secret"
                  path: ".gitlab_shell_secret"
      
      - name: etc-ssl-certs
        emptyDir:
          medium: "Memory"
      - name: custom-ca-certificates
        projected:
          defaultMode: 0440
          sources:
          - secret:
              name: naren-wildcard-tls-ca
      

  
  volumeClaimTemplates:
    - metadata:
        name: repo-data
        labels:
          app: gitaly
          release: naren
        annotations:
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "50Gi"
        selector:
---
# Source: my-gitlab/charts/gitlab/charts/postgresql/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: naren-postgresql
  labels:
    app: postgresql
    chart: postgresql-8.9.4
    release: "naren"
    heritage: "Helm"
  annotations:
spec:
  serviceName: naren-postgresql-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: postgresql
      release: "naren"
      role: master
  template:
    metadata:
      name: naren-postgresql
      labels:
        app: postgresql
        chart: postgresql-8.9.4
        release: "naren"
        heritage: "Helm"
        role: master
      annotations:
        postgresql.gitlab/init-revision: "1"
    spec:      
      securityContext:
        fsGroup: 1001
      containers:
        - name: naren-postgresql
          image: docker.io/bitnami/postgresql:12.7.0
          imagePullPolicy: "IfNotPresent"
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            - name: POSTGRES_POSTGRES_PASSWORD_FILE
              value: "/opt/bitnami/postgresql/secrets/postgresql-postgres-password"
            - name: POSTGRES_USER
              value: "gitlab"
            - name: POSTGRES_PASSWORD_FILE
              value: "/opt/bitnami/postgresql/secrets/postgresql-password"
            - name: POSTGRES_DB
              value: "gitlabhq_production"
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "gitlab" -d "gitlabhq_production" -h 127.0.0.1 -p 5432
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "gitlab" -d "gitlabhq_production" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: custom-init-scripts
              mountPath: /docker-entrypoint-initdb.d/
            - name: postgresql-password
              mountPath: /opt/bitnami/postgresql/secrets/
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
              subPath: 
            - mountPath: /docker-entrypoint-preinitdb.d/init_revision.sh
              name: custom-init-scripts
              subPath: init_revision.sh
        - name: metrics
          image: docker.io/bitnami/postgres-exporter:0.8.0-debian-10-r99
          imagePullPolicy: "IfNotPresent"
          env:
            - name: DATA_SOURCE_URI
              value: "127.0.0.1:5432/gitlabhq_production?sslmode=disable"
            - name: DATA_SOURCE_PASS_FILE
              value: "/opt/bitnami/postgresql/secrets/postgresql-password"
            - name: DATA_SOURCE_USER
              value: gitlab
          livenessProbe:
            httpGet:
              path: /
              port: http-metrics
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            httpGet:
              path: /
              port: http-metrics
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: postgresql-password
              mountPath: /opt/bitnami/postgresql/secrets/
          ports:
            - name: http-metrics
              containerPort: 9187
      volumes:
        - name: postgresql-password
          secret:
            secretName: "naren-postgresql-password"
        - name: custom-init-scripts
          configMap:
            name: naren-postgresql-init-db
        - name: dshm
          emptyDir:
            medium: Memory
            sizeLimit: 1Gi
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
        storageClassName: local-path
---
# Source: my-gitlab/charts/gitlab/charts/redis/templates/redis-master-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: naren-redis-master
  namespace: "naren-gitlab"
  labels:
    app: redis
    chart: redis-11.3.4
    release: naren
    heritage: Helm
spec:
  selector:
    matchLabels:
      app: redis
      release: naren
      role: master
  serviceName: naren-redis-headless
  template:
    metadata:
      labels:
        app: redis
        chart: redis-11.3.4
        release: naren
        role: master
      annotations:
        checksum/health: 5ab0144ae0a035cef6cee31d091295bed06c053b704e99467b08842fbd569ccb
        checksum/configmap: 809acad23dcba74bfb94e49ddfe17e59dcbe95ffede7b85ede2a27e495e7b8ba
        checksum/secret: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
        prometheus.io/port: "9121"
        prometheus.io/scrape: "true"
    spec:
      
      securityContext:
        fsGroup: 1001
      serviceAccountName: default
      containers:
        - name: redis
          image: docker.io/bitnami/redis:6.0.9-debian-10-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          command:
            - /bin/bash
            - -c
            - /opt/bitnami/scripts/start-scripts/start-master.sh
          env:
            - name: REDIS_REPLICATION_MODE
              value: master
            - name: REDIS_PASSWORD_FILE
              value: "/opt/bitnami/redis/secrets/redis-password"
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          livenessProbe:
            initialDelaySeconds: 5
            periodSeconds: 5
            # One second longer than command timeout should prevent generation of zombie processes.
            timeoutSeconds: 6
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local.sh 5
          readinessProbe:
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local.sh 1
          resources:
            null
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: redis-password
              mountPath: /opt/bitnami/redis/secrets/
            - name: redis-data
              mountPath: /data
              subPath: 
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: redis-tmp-conf
              mountPath: /opt/bitnami/redis/etc/
        - name: metrics
          image: docker.io/bitnami/redis-exporter:1.12.1-debian-10-r11
          imagePullPolicy: "IfNotPresent"
          command:
            - /bin/bash
            - -c
            - |
              if [[ -f '/secrets/redis-password' ]]; then
              export REDIS_PASSWORD=$(cat /secrets/redis-password)
              fi
              redis_exporter
          env:
            - name: REDIS_ALIAS
              value: naren-redis
          volumeMounts:
            - name: redis-password
              mountPath: /secrets/
          ports:
            - name: metrics
              containerPort: 9121
          resources:
            null
      volumes:
        - name: start-scripts
          configMap:
            name: naren-redis-scripts
            defaultMode: 0755
        - name: health
          configMap:
            name: naren-redis-health
            defaultMode: 0755
        - name: redis-password
          secret:
            secretName: "naren-redis-secret"
            items:
            - key: "secret"
              path: redis-password
        - name: config
          configMap:
            name: naren-redis
        - name: redis-tmp-conf
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: redis-data
        labels:
          app: redis
          release: naren
          heritage: Helm
          component: master
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
        storageClassName: local-path
        selector:
  updateStrategy:
    type: RollingUpdate
---
# Source: my-gitlab/charts/gitlab/charts/gitlab/charts/migrations/templates/job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: naren-migrations-1
  namespace: naren-gitlab
  labels:
    app: migrations
    chart: migrations-6.1.2
    release: naren
    heritage: Helm
    
spec:
  activeDeadlineSeconds: 3600
  backoffLimit: 6
  template:
    metadata:
      labels:
        app: migrations
        chart: migrations-6.1.2
        release: naren
        heritage: Helm
        
        
    spec:
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
      automountServiceAccountToken: false
      initContainers:
        
        - name: certificates
          image: "registry.gitlab.com/gitlab-org/build/cng/alpine-certificates:20191127-r2@sha256:367d437d024d7647432d67fb2442e3e5723af5930bad77d3535f4f8f4f8630d9"  
          env:
          
          
          volumeMounts:
          - name: etc-ssl-certs
            mountPath: /etc/ssl/certs
            readOnly: false
          - name: custom-ca-certificates
            mountPath: /usr/local/share/ca-certificates
            readOnly: true
          resources:
            requests:
              cpu: 50m
        - name: configure
          command: ['sh', '/config/configure']
          image: "registry.gitlab.com/gitlab-org/cloud-native/mirror/images/busybox:latest"          
          env:
          
          
          volumeMounts:
          
          
          
          - name: migrations-config
            mountPath: /config
            readOnly: true
          - name: init-migrations-secrets
            mountPath: /init-config
            readOnly: true
          - name: migrations-secrets
            mountPath: /init-secrets
            readOnly: false
          resources:
            requests:
              cpu: 50m
      restartPolicy: OnFailure      
      containers:
        
        - name: migrations
          image: "registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ee:v15.1.2"
          args:
            - /scripts/wait-for-deps
            - /scripts/db-migrate          
          env:
            - name: CONFIG_TEMPLATE_DIRECTORY
              value: '/var/opt/gitlab/templates'
            - name: CONFIG_DIRECTORY
              value: '/srv/gitlab/config'
            - name: BYPASS_SCHEMA_VERSION
              value: 'true'
            - name: ENABLE_BOOTSNAP
              value: '1'
            
            
          volumeMounts:
            - name: migrations-config
              mountPath: '/var/opt/gitlab/templates'
            - name: migrations-secrets
              mountPath: '/etc/gitlab'
              readOnly: true
            - name: migrations-secrets
              mountPath: /srv/gitlab/config/secrets.yml
              subPath: rails-secrets/secrets.yml
            - name: migrations-secrets
              mountPath: /srv/gitlab/config/initial_root_password
              subPath: migrations/initial_root_password
            - name: migrations-secrets
              mountPath: /srv/gitlab/config/gitlab_shared_runners_registration_token
              subPath: migrations/gitlab_shared_runners_registration_token
            
            - name: etc-ssl-certs
              mountPath: /etc/ssl/certs/
              readOnly: true
          resources:
            requests:
              cpu: 250m
              memory: 200Mi
      volumes:
      
      
      
      - name: migrations-config
        configMap:
          name: naren-migrations
      - name: init-migrations-secrets
        projected:
          defaultMode: 0400
          sources:
          
          - secret:
              name: "naren-rails-secret"
              items:
                - key: secrets.yml
                  path: rails-secrets/secrets.yml
          - secret:
              name: "naren-gitaly-secret"
              items:
                - key: "token"
                  path: gitaly/gitaly_token
          
          
          - secret:
              name: "naren-redis-secret"
              items:
                - key: "secret"
                  path: redis/redis-password
          - secret:
              name: "naren-postgresql-password"
              items:
                - key: "postgresql-password"
                  path: postgres/psql-password-main
          - secret:
              name: "naren-gitlab-initial-root-password"
              items:
                - key: "password"
                  path: migrations/initial_root_password
          - secret:
              name: "naren-gitlab-runner-secret"
              items:
                - key: runner-registration-token
                  path: migrations/gitlab_shared_runners_registration_token
      - name: migrations-secrets
        emptyDir:
          medium: "Memory"
      
      - name: etc-ssl-certs
        emptyDir:
          medium: "Memory"
      - name: custom-ca-certificates
        projected:
          defaultMode: 0440
          sources:
          - secret:
              name: naren-wildcard-tls-ca
---
# Source: my-gitlab/charts/gitlab/charts/minio/templates/create-buckets-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: naren-minio-create-buckets-1
  namespace: naren-gitlab
  labels:
    app: minio
    chart: minio-0.4.3
    release: naren
    heritage: Helm
    
spec:
  activeDeadlineSeconds: 600
  template:
    metadata:
      labels:
        component: create-buckets
        app: minio
        chart: minio-0.4.3
        release: naren
        heritage: Helm
        
        

    spec:
      automountServiceAccountToken: false
      restartPolicy: OnFailure
      
      volumes:
        - name: minio-configuration
          projected:
            sources:
            - configMap:
                name: naren-minio-config-cm
            - secret:
                name: "naren-minio-secret"      
      containers:
      - name: minio-mc
        image: minio/mc:RELEASE.2018-07-13T00-53-22Z        
        command: ["/bin/sh", "/config/initialize"]
        env:
          - name: MINIO_ENDPOINT
            value: naren-minio-svc.naren-gitlab.svc
          - name: MINIO_PORT
            value: "9000"
        volumeMounts:
          - name: minio-configuration
            mountPath: /config
        resources:
          requests:
            cpu: 50m
---
# Source: my-gitlab/charts/gitlab/charts/gitlab/charts/kas/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: naren-kas
  namespace: naren-gitlab
  labels:
    app: kas
    chart: kas-6.1.2
    release: naren
    heritage: Helm
    
  annotations:
    
    kubernetes.io/ingress.provider: "nginx"
    nginx.ingress.kubernetes.io/proxy-buffering: "off"
    nginx.ingress.kubernetes.io/custom-http-errors: ""
    
spec:
  ingressClassName: "nginx"
  rules:
    - host: kas.10.181.136.59.nip.io
      http:
        paths:
          - path: "/"
            pathType: Prefix
            backend:
              service:
                  name: naren-kas
                  port:
                    number: 8150
          - path: "/k8s-proxy/"
            pathType: Prefix
            backend:
              service:
                name: naren-kas
                port:
                  number: 8154
  tls:
    - hosts:
      - kas.10.181.136.59.nip.io
      secretName: naren-wildcard-tls
---
# Source: my-gitlab/charts/gitlab/charts/gitlab/charts/webservice/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: naren-webservice-default
  namespace: naren-gitlab
  labels:
    app: webservice
    chart: webservice-6.1.2
    release: naren
    heritage: Helm
    gitlab.com/webservice-name: default
    
  annotations:
    
    kubernetes.io/ingress.provider: "nginx"
    nginx.ingress.kubernetes.io/proxy-body-size: "512m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "15"
    
    nginx.ingress.kubernetes.io/service-upstream: "true"
spec:
  ingressClassName: "nginx"
  rules:
    - host: gitlab.10.181.136.59.nip.io
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                  name: naren-webservice-default
                  port:
                    number: 8181
  tls:
    - hosts:
      - gitlab.10.181.136.59.nip.io
      secretName: naren-wildcard-tls
---
# Source: my-gitlab/charts/gitlab/charts/minio/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: naren-minio
  namespace: naren-gitlab
  labels:
    app: minio
    chart: minio-0.4.3
    release: naren
    heritage: Helm
    
  annotations:
    
    kubernetes.io/ingress.provider: "nginx"
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "900"
    nginx.ingress.kubernetes.io/proxy-request-buffering: "off"
    nginx.ingress.kubernetes.io/proxy-buffering: "off"
    
spec:
  ingressClassName: "nginx"
  rules:
    - host: minio.10.181.136.59.nip.io
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                  name: naren-minio-svc
                  port:
                    number: 9000
  tls:
    - hosts:
      - minio.10.181.136.59.nip.io
      secretName: naren-wildcard-tls
---
# Source: my-gitlab/charts/gitlab/charts/registry/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: naren-registry
  namespace: naren-gitlab
  labels:
    app: registry
    chart: registry-0.7.0
    release: naren
    heritage: Helm
    
  annotations:
    
    kubernetes.io/ingress.provider: "nginx"
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "900"
    nginx.ingress.kubernetes.io/proxy-request-buffering: "off"
    nginx.ingress.kubernetes.io/proxy-buffering: "off"
    
spec:
  ingressClassName: "nginx"
  rules:
    - host: registry.10.181.136.59.nip.io
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: naren-registry
                port:
                  number:  5000
  tls:
    - hosts:
      - registry.10.181.136.59.nip.io
      secretName: naren-wildcard-tls
---
# Source: my-gitlab/charts/gitlab/templates/shared-secrets/rbac-config.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: naren-shared-secrets
  namespace: naren-gitlab
  labels:
    app: gitlab
    chart: gitlab-6.1.2
    release: naren
    heritage: Helm
    
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
---
# Source: my-gitlab/charts/gitlab/templates/shared-secrets/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: naren-shared-secrets
  namespace: naren-gitlab
  labels:
    app: gitlab
    chart: gitlab-6.1.2
    release: naren
    heritage: Helm
    
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-3"
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
data:
  generate-secrets: |
    # vim: set filetype=sh:
    
    namespace=naren-gitlab
    release=naren
    env=production
    
    pushd $(mktemp -d)
    
    # Args pattern, length
    function gen_random(){
      head -c 4096 /dev/urandom | LC_CTYPE=C tr -cd $1 | head -c $2
    }
    
    # Args: yaml file, search path
    function fetch_rails_value(){
      local value=$(yq ".${2}" $1)
    
      # Don't return null values
      if [ "${value}" != "null" ]; then echo "${value}"; fi
    }
    
    # Args: secretname
    function label_secret(){
      local secret_name=$1
    # Remove application labels if they exist
      kubectl --namespace=$namespace label \
        secret $secret_name $(echo 'app.kubernetes.io/name=naren' | sed -E 's/=[^ ]*/-/g')
    
      kubectl --namespace=$namespace label \
        --overwrite \
        secret $secret_name app=gitlab chart=gitlab-6.1.2 release=naren heritage=Helm 
    }
    
    # Args: secretname, args
    function generate_secret_if_needed(){
      local secret_args=( "${@:2}")
      local secret_name=$1
    
      if ! $(kubectl --namespace=$namespace get secret $secret_name > /dev/null 2>&1); then
        kubectl --namespace=$namespace create secret generic $secret_name ${secret_args[@]}
      else
        echo "secret \"$secret_name\" already exists."
    
        for arg in "${secret_args[@]}"; do
          local from=$(echo -n ${arg} | cut -d '=' -f1)
    
          if [ -z "${from##*literal*}" ]; then
            local key=$(echo -n ${arg} | cut -d '=' -f2)
            local desiredValue=$(echo -n ${arg} | cut -d '=' -f3-)
            local flags="--namespace=$namespace --allow-missing-template-keys=false"
    
            if ! $(kubectl $flags get secret $secret_name -ojsonpath="{.data.${key}}" > /dev/null 2>&1); then
              echo "key \"${key}\" does not exist. patching it in."
    
              if [ "${desiredValue}" != "" ]; then
                desiredValue=$(echo -n "${desiredValue}" | base64 -w 0)
              fi
    
              kubectl --namespace=$namespace patch secret ${secret_name} -p "{\"data\":{\"$key\":\"${desiredValue}\"}}"
            fi
          fi
        done
      fi
    
      label_secret $secret_name
    }
    
    # Initial root password
    generate_secret_if_needed "naren-gitlab-initial-root-password" --from-literal="password"=$(gen_random 'a-zA-Z0-9' 64)
    
    # Redis password
    generate_secret_if_needed "naren-redis-secret" --from-literal="secret"=$(gen_random 'a-zA-Z0-9' 64)
    
    
    # Postgres password
    generate_secret_if_needed "naren-postgresql-password" --from-literal=postgresql-password=$(gen_random 'a-zA-Z0-9' 64) --from-literal=postgresql-postgres-password=$(gen_random 'a-zA-Z0-9' 64)
    
    
    # Gitlab shell
    generate_secret_if_needed "naren-gitlab-shell-secret" --from-literal="secret"=$(gen_random 'a-zA-Z0-9' 64)
    
    # Gitaly secret
    generate_secret_if_needed "naren-gitaly-secret" --from-literal="token"=$(gen_random 'a-zA-Z0-9' 64)
    
    # Minio secret
    generate_secret_if_needed "naren-minio-secret" --from-literal=accesskey=$(gen_random 'a-zA-Z0-9' 64) --from-literal=secretkey=$(gen_random 'a-zA-Z0-9' 64)
    
    
    # Gitlab runner secret
    generate_secret_if_needed "naren-gitlab-runner-secret" --from-literal=runner-registration-token=$(gen_random 'a-zA-Z0-9' 64) --from-literal=runner-token=""
    
    # GitLab Pages API secret
    
    
    # GitLab Pages auth secret for hashing cookie store when using access control
    
    
    # GitLab Pages OAuth secret
    
    
    # Gitlab-kas secret
    generate_secret_if_needed "naren-gitlab-kas-secret" --from-literal="kas_shared_secret"=$(gen_random 'a-zA-Z0-9' 32 | base64)
    
    # Gitlab-kas private API secret
    generate_secret_if_needed "naren-kas-private-api" --from-literal="kas_private_api_secret"=$(gen_random 'a-zA-Z0-9' 32 | base64)
    
    
    
    
    
    
    # Registry certificates
    mkdir -p certs
    openssl req -new -newkey rsa:4096 -subj "/CN=gitlab-issuer" -nodes -x509 -keyout certs/registry-example-com.key -out certs/registry-example-com.crt -days 3650
    generate_secret_if_needed "naren-registry-secret" --from-file=registry-auth.key=certs/registry-example-com.key --from-file=registry-auth.crt=certs/registry-example-com.crt
    
    # config/secrets.yaml
    if [ -n "$env" ]; then
      rails_secret="naren-rails-secret"
    
      # Fetch the values from the existing secret if it exists
      if $(kubectl --namespace=$namespace get secret $rails_secret > /dev/null 2>&1); then
        kubectl --namespace=$namespace get secret $rails_secret -o jsonpath="{.data.secrets\.yml}" | base64 --decode > secrets.yml
        secret_key_base=$(fetch_rails_value secrets.yml "${env}.secret_key_base")
        otp_key_base=$(fetch_rails_value secrets.yml "${env}.otp_key_base")
        db_key_base=$(fetch_rails_value secrets.yml "${env}.db_key_base")
        openid_connect_signing_key=$(fetch_rails_value secrets.yml "${env}.openid_connect_signing_key")
        ci_jwt_signing_key=$(fetch_rails_value secrets.yml "${env}.ci_jwt_signing_key")
        encrypted_settings_key_base=$(fetch_rails_value secrets.yml "${env}.encrypted_settings_key_base")
      fi;
    
      # Generate defaults for any unset secrets
      secret_key_base="${secret_key_base:-$(gen_random 'a-f0-9' 128)}" # equavilent to secureRandom.hex(64)
      otp_key_base="${otp_key_base:-$(gen_random 'a-f0-9' 128)}" # equavilent to secureRandom.hex(64)
      db_key_base="${db_key_base:-$(gen_random 'a-f0-9' 128)}" # equavilent to secureRandom.hex(64)
      openid_connect_signing_key="${openid_connect_signing_key:-$(openssl genrsa 2048)}"
      ci_jwt_signing_key="${ci_jwt_signing_key:-$(openssl genrsa 2048)}"
      encrypted_settings_key_base="${encrypted_settings_key_base:-$(gen_random 'a-f0-9' 128)}" # equavilent to secureRandom.hex(64)
    
      # Update the existing secret
      cat << EOF > rails-secrets.yml
    apiVersion: v1
    kind: Secret
    metadata:
      name: $rails_secret
    type: Opaque
    stringData:
      secrets.yml: |-
        $env:
          secret_key_base: $secret_key_base
          otp_key_base: $otp_key_base
          db_key_base: $db_key_base
          encrypted_settings_key_base: $encrypted_settings_key_base
          openid_connect_signing_key: |
    $(echo "${openid_connect_signing_key}" | awk '{print "        " $0}')
          ci_jwt_signing_key: |
    $(echo "${ci_jwt_signing_key}" | awk '{print "        " $0}')
    EOF
      kubectl --validate=false --namespace=$namespace apply -f rails-secrets.yml
      label_secret $rails_secret
    fi
    
    # Shell ssh host keys
    ssh-keygen -A
    mkdir -p host_keys
    cp /etc/ssh/ssh_host_* host_keys/
    generate_secret_if_needed "naren-gitlab-shell-host-keys" --from-file host_keys
    
    # Gitlab-workhorse secret
    generate_secret_if_needed "naren-gitlab-workhorse-secret" --from-literal="shared_secret"=$(gen_random 'a-zA-Z0-9' 32 | base64)
    
    # Registry http.secret secret
    generate_secret_if_needed "naren-registry-httpsecret" --from-literal="secret"=$(gen_random 'a-z0-9' 128 | base64 -w 0)
    
    # Container Registry notification_secret
    generate_secret_if_needed "naren-registry-notification" --from-literal="secret"=[\"$(gen_random 'a-zA-Z0-9' 32)\"]
---
# Source: my-gitlab/charts/gitlab/templates/upgrade_check_hook.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: naren-gitlab-upgrade-check
  namespace: naren-gitlab
  labels:
    app: gitlab
    chart: gitlab-6.1.2
    release: naren
    heritage: Helm
    
  annotations:
    "helm.sh/hook": pre-upgrade
    "helm.sh/hook-weight": "-11"
    "helm.sh/hook-delete-policy": before-hook-creation
data:
  runcheck: |
    #!/bin/sh
    
    set -e
    
    notify() {
      echo "$1"
      echo -n "$1 " >> /dev/termination-log
    }
    
    greater_version()
    {
      test "$(printf '%s\n' "$@" | sort -V | tail -n 1)" = "$1";
    }
    
    # For the PostgreSQL upgrade, you either need both secrets, or no secrets.
    # If there are no secrets, we will create them for you.
    # If the secrets aren't in either of these states, we assume you are upgrading from an older version
    # This is running ahead of version checks to ensure this always runs. This is to account for
    # installations outside of the official helm repo.
    secrets_dir="/etc/secrets/postgresql"
    if [ -d "${secrets_dir}" ]; then
      if [ ! "$(ls -A ${secrets_dir}/..data/)" = "" ]; then
        if [ ! -f "${secrets_dir}/postgresql-postgres-password" ] || [ ! -f "${secrets_dir}/postgresql-password" ]; then
          notify "You seem to be upgrading from a previous version of GitLab using the bundled PostgreSQL chart"
          notify "There are some manual steps which need to be performed in order to upgrade the database"
          notify "Please see the upgrade documentation for instructions on how to proceed:"
          notify "https://docs.gitlab.com/charts/installation/upgrade.html"
          exit 1
        fi
      fi
    fi
    MIN_VERSION=14.10
    CHART_MIN_VERSION=5.10
    
    # Only run check for semver releases
    if ! awk 'BEGIN{exit(!(ARGV[1] ~ /^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}/))}' "$GITLAB_VERSION"; then
      exit 0
    fi
    
    NEW_MAJOR_VERSION=$(echo $GITLAB_VERSION | awk -F "." '{print $1}')
    NEW_MINOR_VERSION=$(echo $GITLAB_VERSION | awk -F "." '{print $1"."$2}')
    
    NEW_CHART_MAJOR_VERSION=$(echo $CHART_VERSION | awk -F "." '{print $1}')
    NEW_CHART_MINOR_VERSION=$(echo $CHART_VERSION | awk -F "." '{print $1"."$2}')
    
    if [ ! -f /chart-info/gitlabVersion ]; then
      notify "It seems you are attempting an unsupported upgrade path."
      notify "Please follow the upgrade documentation at https://docs.gitlab.com/ee/update/README.html#upgrade-paths"
      exit 1
    fi
    
    OLD_VERSION_STRING=$(cat /chart-info/gitlabVersion)
    OLD_CHART_VERSION_STRING=$(cat /chart-info/gitlabChartVersion)
    
    # Skip check if old version wasn't semver
    if ! awk 'BEGIN{exit(!(ARGV[1] ~ /^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}/))}' "$OLD_VERSION_STRING"; then
      exit 0
    fi
    
    OLD_MAJOR_VERSION=$(echo $OLD_VERSION_STRING | awk -F "." '{print $1}')
    OLD_MINOR_VERSION=$(echo $OLD_VERSION_STRING | awk -F "." '{print $1"."$2}')
    OLD_CHART_MAJOR_VERSION=$(echo $OLD_CHART_VERSION_STRING | awk -F "." '{print $1}')
    OLD_CHART_MINOR_VERSION=$(echo $OLD_CHART_VERSION_STRING | awk -F "." '{print $1"."$2}')
    
    # Checking Version
    # (i) if it is a major version jump
    # (ii) if existing version is less than required minimum version
    if [ ${OLD_MAJOR_VERSION} -lt ${NEW_MAJOR_VERSION} ] || [ ${OLD_CHART_MAJOR_VERSION} -lt ${NEW_CHART_MAJOR_VERSION} ]; then
      if ( ! greater_version $OLD_MINOR_VERSION $MIN_VERSION ) || ( ! greater_version $OLD_CHART_MINOR_VERSION $CHART_MIN_VERSION ); then
        notify "It seems you are upgrading the GitLab Helm Chart from ${OLD_CHART_VERSION_STRING} (GitLab ${OLD_VERSION_STRING}) to ${CHART_VERSION} (GitLab ${GITLAB_VERSION})."
        notify "It is required to upgrade to the latest ${CHART_MIN_VERSION}.x version first before proceeding."
        notify "Please follow the upgrade documentation at https://docs.gitlab.com/charts/releases/6_0.html"
        notify "and upgrade to GitLab Helm Chart version ${CHART_MIN_VERSION}.x before upgrading to ${CHART_VERSION}."
        exit 1
      fi
    fi
---
# Source: my-gitlab/charts/gitlab/templates/shared-secrets/rbac-config.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: naren-shared-secrets
  namespace: naren-gitlab
  labels:
    app: shared-secrets
    chart: shared-secrets-6.1.2
    release: naren
    heritage: Helm
    
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "create", "patch"]
---
# Source: my-gitlab/charts/gitlab/templates/shared-secrets/rbac-config.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: naren-shared-secrets
  namespace: naren-gitlab
  labels:
    app: shared-secrets
    chart: shared-secrets-6.1.2
    release: naren
    heritage: Helm
    
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: naren-shared-secrets
subjects:
  - kind: ServiceAccount
    name: naren-shared-secrets
    namespace: naren-gitlab
---
# Source: my-gitlab/charts/gitlab/charts/gitlab/charts/webservice/templates/tests/test-runner.yaml
apiVersion: v1
kind: Pod
metadata:
  name: naren-webservice-test-runner-zpdx9
  namespace: naren-gitlab
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-delete-policy": hook-succeeded,hook-failed,before-hook-creation
spec:
  containers:
  - name: test-runner
    image: registry.gitlab.com/gitlab-org/build/cng/gitlab-webservice-ee:v15.1.2
    command: ['sh', '/tests/test_login']
    volumeMounts:
      - name: tests
        mountPath: '/tests'
      - name: root-password
        readOnly: true
        mountPath: /initial_root_password
        subPath: initial_root_password
  volumes:
  - name: tests
    configMap:
      name: naren-webservice-tests
  - name: root-password
    secret:
      secretName: "naren-gitlab-initial-root-password"
      items:
        - key: "password"
          path: initial_root_password
  restartPolicy: Never
---
# Source: my-gitlab/charts/gitlab/templates/shared-secrets/job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: naren-shared-secrets-1-yqa
  namespace: naren-gitlab
  labels:
    app: gitlab
    chart: gitlab-6.1.2
    release: naren
    heritage: Helm
    
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
spec:
  template:
    metadata:
      labels:
        app: gitlab
        chart: gitlab-6.1.2
        release: naren
        heritage: Helm
        
        
      annotations:
    spec:
      
      securityContext:
        runAsUser: 65534
        fsGroup: 65534
      serviceAccountName: naren-shared-secrets
      restartPolicy: Never
      
      containers:
        - name: gitlab
          image: "registry.gitlab.com/gitlab-org/build/cng/kubectl:1.18.20@sha256:8d27c191af306cafddba2f293c5613f8966363f779d79a5599ad0231e60069e4"          
          command: ['/bin/bash', '/scripts/generate-secrets']
          volumeMounts:
            - name: scripts
              mountPath: /scripts
            - name: ssh
              mountPath: /etc/ssh
          resources:
            requests:
              cpu: 50m
      volumes:
      - name: scripts
        configMap:
          name: naren-shared-secrets
      - name: ssh
        emptyDir: {}
---
# Source: my-gitlab/charts/gitlab/templates/shared-secrets/self-signed-cert-job.yml
apiVersion: batch/v1
kind: Job
metadata:
  name: naren-shared-secrets-1-fwc-selfsign
  namespace: naren-gitlab
  labels:
    app: gitlab
    chart: gitlab-6.1.2
    release: naren
    heritage: Helm
    
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
spec:
  template:
    metadata:
      labels:
        app: gitlab
        release: naren
      annotations:
    spec:
      
      securityContext:
        runAsUser: 65534
        fsGroup: 65534
      serviceAccountName: naren-shared-secrets
      restartPolicy: Never
      
      initContainers:
      - name: cfssl-self-sign
        image: "registry.gitlab.com/gitlab-org/build/cng/cfssl-self-sign:1.6.1@sha256:e89392e13b4ef12cd48ba8c30326aacd89a8d0161cb081ac8dfbb77200d5ebac"        
        env:
        - name: CA_SUBJECT
          value: "GitLab Helm Chart" # defaults to GitLab in container
        - name: CA_ORG
          value: "naren-gitlab" # defaults to GitLab in container
        - name: CA_ORG_UNIT
          value: "naren" # defaults to Cloud Native in container
        - name: CERT_SUBJECT
          value: "10.181.136.59.nip.io" # defaults to GitLab in container
        - name: CERT_DOMAIN
          value: "10.181.136.59.nip.io" # defaults to example.com in container
        - name: EXPIRY
          value: "3650d" # defaults to 8076h in container
        - name: ALGORITHM
          value: "rsa" # defaults to ecdsa in container
        - name: KEY_SIZE
          value: "4096" # defaults to 256 inside container
        volumeMounts:
        - name: certs-path
          mountPath: /output
        resources:
          requests:
            cpu: 50m
      containers:
      - name: kubectl
        image: "registry.gitlab.com/gitlab-org/build/cng/kubectl:1.18.20@sha256:8d27c191af306cafddba2f293c5613f8966363f779d79a5599ad0231e60069e4"        
        command:
        - /bin/bash
        - -exc
        - |
          certname=naren-wildcard-tls
          # create wildcard certificate secret
          kubectl create secret tls $certname \
            --cert=/output/wildcard.pem --key=/output/wildcard-key.pem || true
          kubectl --namespace=$namespace label \
            secret $certname  $(echo 'app.kubernetes.io/name=naren' | sed -E 's/=[^ ]*/-/g')
          kubectl --namespace=$namespace label --overwrite \
            secret $certname app=gitlab chart=gitlab-6.1.2 release=naren heritage=Helm 
          # create CA certificate secret
          kubectl create secret generic ${certname}-ca \
            --from-file=cfssl_ca=/output/ca.pem || true
          kubectl --namespace=$namespace label \
            secret ${certname}-ca  $(echo 'app.kubernetes.io/name=naren' | sed -E 's/=[^ ]*/-/g')
          kubectl --namespace=$namespace label --overwrite \
            secret ${certname}-ca app=gitlab chart=gitlab-6.1.2 release=naren heritage=Helm 
          # create certificate chain for GitLab Runner
          cat /output/ca.pem /output/wildcard.pem > /tmp/gitlab.10.181.136.59.nip.io.crt
          kubectl create secret generic ${certname}-chain \
            --from-file=/tmp/gitlab.10.181.136.59.nip.io.crt || true
          kubectl --namespace=$namespace label \
            secret ${certname}-chain  $(echo 'app.kubernetes.io/name=naren' | sed -E 's/=[^ ]*/-/g')
          kubectl --namespace=$namespace label --overwrite \
            secret ${certname}-chain app=gitlab chart=gitlab-6.1.2 release=naren heritage=Helm 
        volumeMounts:
        - name: certs-path
          mountPath: /output
        resources:
          requests:
            cpu: 50m
      volumes:
      - name: certs-path
        emptyDir: {}
---
# Source: my-gitlab/charts/gitlab/templates/upgrade_check_hook.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: naren-gitlab-upgrade-check
  namespace: naren-gitlab
  labels:
    app: gitlab
    chart: gitlab-6.1.2
    release: naren
    heritage: Helm
    
  annotations:
    "helm.sh/hook": pre-upgrade
    "helm.sh/hook-weight": "-10"
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
spec:
  backoffLimit: 2
  template:
    metadata:
      labels:
        app: gitlab
        release: naren

    spec:
      
      securityContext:
        runAsUser: 65534
        fsGroup: 65534
      restartPolicy: Never
      
      containers:
        - name: run-check
          image: "registry.gitlab.com/gitlab-org/cloud-native/mirror/images/busybox:latest"
          command: ['/bin/sh', '/scripts/runcheck']          
          env:
            - name: GITLAB_VERSION
              value: '15.1.2'
            - name: CHART_VERSION
              value: '6.1.2'
          volumeMounts:
            - name: chart-info
              mountPath: /chart-info
            - name: scripts
              mountPath: /scripts
            - name: postgresql-secret
              mountPath: /etc/secrets/postgresql
          resources:
            requests:
              cpu: 50m
      volumes:
      - name: chart-info
        configMap:
          name: naren-gitlab-chart-info
          optional: true
      - name: scripts
        configMap:
          name: naren-gitlab-upgrade-check
      - name: postgresql-secret
        secret:
          secretName: "naren-postgresql-password"
          optional: true
